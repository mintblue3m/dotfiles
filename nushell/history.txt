sway
dbus-run-session sway
vim .zprofile
alacritty
ls
cat ${UID}
cat $UID
cat .zprofile
echo $UID
grep DISPLAY .config/nushell/config.nu
echo $env
echo $env | less
echo $env | grep DISPLAY
echo $env | grep WAYLAND_DISPLAY
echo $env | grep -i wayland
echo $env | grep -i shell
echo $env | grep -i display
echo $env | grep -i xdg
ls /run/dbus/
vim .zprofile
ls /tmp/1000-runtime-dir/
cat .zprofile
$env.XDG_RUNTIME_DIR = '/tmp/1000-runtime-dir/'
sway
wpctl status
tldr wpctl
pipewire
sudo pkill pipewire
pwtop
pw-top
dbus-run-session sway
$env.XDG_RUNTIME_DIR = '/tmp/1000-runtime-dir'
echo $env | grep -i xdg
pw-top
wpctl status
cd rust/
ls
cd ..
cd git/ls
cd git/
ls
rm -rf ZeroTierOne/
ls
git clone https://github.com/nushell/nushell.github.io.git
$nu.env-path
vim $nu.env-path
vim $nu.config-path
which cd
which z
z
z rust
ls
cd
z down
ls
cd
cd down
ls
vim ~/.config/nushell/config.nu
zoxide
zoxide init nushell
man zoxide
ls -a 
vim .zshrc
vim ~/.config/nushell/config.nu
source ~/.config/nushell/config.nu
which cd
cd down
$env.ZOXIDE_CMD_OVERRIDE | describe
$env.ZOXIDE_CMD_OVERRIDE 
vim ~/.config/nushell/env.nu
tldr zoxide init
tldr zoxide-init
man zoxide-init
xbps-query zoxide
vim ~/.zoxide.nu
source ~/.config/nushell/config.nu
source ~/.config/nushell/env.nu
which cd
cd down
tldr test
vim ~/.config/nushell/env.nu
$env.USER
$env."I3SOCK"
id -u krabs
vim ~/.config/nushell/env.nu
echo $env.XDG_RUNTIME_DIR = "/tmp/"$(id -u krabs)"-runtime-dir"
echo ($env.XDG_RUNTIME_DIR = "/tmp/"$(id -u krabs)"-runtime-dir")
echo $(id -u krabs)
echo $id -u krabs)
echo $id -u krabs
echo (id -u krabs)
echo ($env.XDG_RUNTIME_DIR = "/tmp/"(id -u krabs)"-runtime-dir")
echo $env.XDG_RUNTIME_DIR = "/tmp/"(id -u krabs)"-runtime-dir"
echo $env.XDG_RUNTIME_DIR = "/tmp/(id -u krabs)-runtime-dir"
print (id -u krabs)
print (print (id -u krabs))
.print (print (id -u krabs))
env set
$env.XDG_RUNTIME_DIR
env set /tmp/1000-runtime-dir
$env.XDG_RUNTIME_DIR=/tmp/1000-runtime-dir
$env.XDG_RUNTIME_DIR = /tmp/1000-runtime-dir
$env.XDG_RUNTIME_DIR = "/tmp/1000-runtime-dir"
$env.XDG_RUNTIME_DIR="/tmp/1000-runtime-dir"
$env.XDG_RUNTIME_DIR = "/tmp/1000-runtime-dir"
vim ~/.config/nushell/env.nu
echo ${XDG_RUNTIME_DIR}
vim ~/.config/nushell/env.nu
echo ($id -u krabs)
echo (id -u krabs)
vim ~/.config/nushell/env.nu
$env.UID = (id -u krabs)
$env.UID
$env.XDG_RUNTIME_DIR = "/tmp/($env.UID)-runtime-dir"
$env.XDG_RUNTIME_DIR
$env.XDG_RUNTIME_DIR = "/tmp/(print $env.UID)-runtime-dir"
$env.XDG_RUNTIME_DIR
def greet [name: string] {<\n>    $"hello ($name)"<\n>}
greet 
$env.XDG_RUNTIME_DIR = "/tmp/$( $env.UID)-runtime-dir"
$env.XDG_RUNTIME_DIR
$env.XDG_RUNTIME_DIR = $"/tmp/($env.UID)-runtime-dir"
$env.XDG_RUNTIME_DIR
vim ~/.config/nushell/env.nu
$env.XDG_RUNTIME_DIR = $"/tmp/(id -u krabs)-runtime-dir"
$env.XDG_RUNTIME_DIR
path exists /tmp/1000-runtime-dir/
path exists /tmp/1000-runtime-dir
man path
path exists --help
/home/krabs/ | path exists
print /home/krabs/ | path exists
print "/home/krabs/" | path exists
$env.XDG_RUNTIME_DIR | path exists
$env.XDG_RUNTIME_DIR | path exists == no
($env.XDG_RUNTIME_DIR | path exists) == no
vim ~/.config/nushell/env.nu
dbus-run-session sway
exit
dbus-run-session sway
is-empty --help
vim ~/.config/nushell/env.nu
exit
is-empty --help
$env.XDG_RUNTIME_DIR | is-empty 
$env.XDG_RUNTIME_DIR | path exists
$env.XDG_RUNTIME_DIR
vim ~/.config/nushell/env.nu
/tmp/1000-runtime-dir/
ls
cd ..
cd
/tmp/1000-runtime-dir | is-empty 
cat /tmp/1000-runtime-dir | is-empty 
? /tmp/1000-runtime-dir | is-empty 
cat? /tmp/1000-runtime-dir | is-empty 
cat ?"/tmp/1000-runtime-dir" | is-empty 
cat $"/tmp/1000-runtime-dir" | is-empty 
cat $"/tmp/(id-u krabs)-runtime-dir" | is-empty 
cat $"/tmp/(id -u krabs)-runtime-dir" | is-empty 
vim ~/.config/nushell/env.nu
ls /tmp/1000-runtime-dir/
ls /tmp/1000-runtime-dir | is-empty 
vim ~/.config/nushell/env.nu
ls /tmp/1000-runtime-dir | is-empty 
exit
sudo reboot 
dbus-run-session sway
vim ~/.config/nushell/env.nu
exit
$env.XDG_RUNTIME_DIR
vim ~/.config/nushell/env.nu
exit
wpctl status
vim ~/.config/nushell/env.nu
exit
wpctl status
pkill pipewire
pkill pipewire-pulse
dbus-run-session sway
vim ~/.config/nushell/env.nu
exit
cat .config/nushell/env.nu
bat .config/nushell/env.nu
clear
bat .config/nushell/env.nu
sudo pkill firefox
pkill firefox
nmcli connect status
nmcli connect --help
nmcli connect show
sudo wg
firefox 
$env.XDG_RUNTIME_DIR
$env.WAYLAND_DISPLAY
firefox-wayland 
cd Down
z down
./PrismLauncher-Linux-x86_64.AppImage
sudo reboot
date
date now
bat .config/nushell/env.nu
grep $/tmp/(id -u krabs)-runtime-dir
cd dow
vim .zoxide.nu
source ~/.config/nushell/env.nu
source ~/.config/nushell/config.nu
which cd
cd Down
firefox-wayland 
dbus-run-session sway
exit
which cd
cd ds
vim .zoxide.nu
vim ~/.config/nushell/env.nu
vim ~/.config/nushell/config.nu
zoxide init nushell
zoxide init nushell | less
man zoxide-init
vim ~/.config/nushell/env.nu
vim ~/.config/nushell/config.nu
cat .zoxide.nu
vim ~/.config/nushell/config.nu
exit
cd down
ls
cd
wpctl status
pkill pipewire-pulse
pkill pipewire
pipewire-pulse -d
pw-top
pipewire &
pipewire-pulse 
job spawn { pipewire }
job spawn { pipewire-pulse }
job list
pw-top
vim ~/.config/sway/config
man 5 sway
$env.USER
job list
job kill 1
job kill 2
vim ~/.config/sway/config
job list
vim ~/.config/sway/config
job list
vim ~/.config/sway/config
vim ~/.config/nushell/config.nu
sleep 10
sleep --help
vim ~/.config/nushell/config.nu
exit
dbus-run-session sway
exit
vim ~/.config/nushell/config.nu
exit
vim ~/.config/nushell/config.nu
exit
pw-top
dbus-run-session sway
exit
vim ~/.config/nushell/config.nu
exit
pw-top 
sudo reboot 
pw-top 
vim ~/.config/nushell/config.nu
vim ~/.config/nushell/env.nu
job list
sudo job list
kill --help
ps
cd git
ls
cd nushell.github.io/
ls
cd
$env.PATH
echo $HOME
echo $env.HOME
vim .zshrc
$env.PATH = "~/.local/bin;~/.cargo/bin"
$env.PATH
$env.PATH = "/home/krabs/.local/bin;/home/krabs/.cargo/bin"
$env.PATH
$env.path ++= ["~/books"]
$env.PATH ++= ["~/books"]
$env.PATH ++= "~/books"
$env.PATH
$env.path ++= ["~/.local/bin"]
$env.path ++ ["~/.local/bin"]
$env.path | "~/.local/share"
$env.path
$env.path | append "~/.local/share"
vim ~/.config/nushell/env.nu
$env.path | append "/usr/bin"
$env.path | append "/bin"
$env.path | append "/usr/bin"
$env.path | append "/sbin"
$env.PATH = ($env.PATH | split row (char esep) | append "/usr/bin")
$env.PATH
$env.PATH = ($env.PATH |  append "/bin")
$env.PATH
vim ~/.config/nushell/env.nu
ls .cargo/bin/
rustlings
$env.PATH = ($env.PATH |  append "~/.cargo/bin")
mdbook
rustlings
vim .zshrc
vim ~/.config/nushell/env.nu
sudo xbps-remove dracut
sudo xbps-remove linux-base
sudo vim /usr/share/xbps.d/ignorepkgs.conf
man xbps-reconfigure
sudo xbps-reconfigure rust
sudo xbps-reconfigure openjdk17
man xbps-reconfigure
man xbps-reconfigure -fa -i linux-base
xbps-reconfigure -fa -i linux-base
sudo xbps-reconfigure -fa -i linux-base
sudo xbps-reconfigure -fa -i linux-base dracut linux-6.12
ls /boot/
dbus-run-session sway
exit
job list
exit
$env.PATH
$env.JAVA_HOME
$env.CARGO_HOME
sudo poweroff 
date now
sudo pkill chronyd
sudo chronyd
date now
vim ~/.config/sway/config
i3status-rs 
/usr/bin/i3status-rs
cd DOwn
ls
7z x JetBrainsMono.zip -o*
ls
cd JetBrainsMono/
ls
cp JetBrainsMonoNerdFontMono-Regular.ttf ~/.local/share/fonts/
fc-cache -fv
fc-list
clear
fc-list | grep jetbrains
fc-list | grep -i jetbrains
vim $nu.config-path
vim $nu.env-path
vim ~/.config/sway/config
man i3status-rust
man i3status-rs
sudo xbps-remove i3status-rust
man 5 sway
starship completions nushell
starship completions nushell | tee { save ~/.config/nushell/env.nu --append }
cd $nu.env-path
vim $nu.env-path
exit
xi waybar
xrs waybar
xi Waybar
waybar 
vim .config/sway/config
man 5 sway-bar
vim .config/sway/config
mkdir .config/waybar
sudo cp /etc/xdg/waybar/* .config/waybar/.
vim .config/waybar/config.jsonc
cp ~/Downloads/config ~/.config/waybar/
cp ~/Downloads/style.css ~/.config/waybar/.
cp ~/Downloads/style.css ~/.config/waybar/style.css
cp -f ~/Downloads/style.css ~/.config/waybar/style.css
cp --help
cp -f ~/Downloads/style.css ~/.config/waybar/style.css
sudo cp -f ~/Downloads/style.css ~/.config/waybar/style.css
cd .config/waybar/style.css
cd .config/waybar/
ls
which cd
vim config
vim config.jsonc
vim config
rm config.jsonc
vim config
vim style.css
l 
ls
ls -l
chmod 644 style.css
vim style.css
vim config
cp ~/Downloads/solid-color-image.jpeg ~
cd
vim ~/.config/sway/config
cd waybar
ls
cp `~/Downloads/style(1).css` style.css
cp `~/Downloads/config(1)` config
vim ~/.config/sway/config
vim config
vim style.css
fc-list 
ls ~/.local/share/fonts/
fc-list | grep -i mira
vim style.css
fc-list | grep -i mono
vim style.css
vim ~/.config/waybar/config
vim ~/.config/waybar/style.css
fc-list | grep -i mira
vim ~/.config/waybar/style.css
fc-list | grep -i mira
vim ~/.config/waybar/style.css
vim style.css
vim ~/.config/waybar/style.css
vim ~/.config/sway/config
man 5 sway
sudo wg
vim ~/.config/sway/config
vim ~/.config/waybar/style.css
fastfetch
vim ~/.config/sway/config
fc-list | grep -i font
fc-list | grep -i mono
fc-list | print
fc-list | grep -i mono
fc-list | bat grep -i mono
fc-list | bat | grep -i mono
cd Downloads/n
cd Downloads/
7z x FiraCode.zip -o*
cd FiraCode/
ls
cp *.ttf ~/.local/share/fonts/
fc-cache -fv
fc-list | bat | grep -i fira
vim ~/.config/waybar/style.css
vim ~/.config/sway/config
vim ~/.config/waybar/style.css
vim ~/.config/sway/config
vim ~/.config/waybar/style.css
vim ~/.config/sway/config
ls ~/.local/share/fonts/
fc-list | bat | grep -i Termi
vim ~/.config/sway/config
fc-list | bat | grep -i fira
vim ~/.config/sway/config
fc-list | bat | grep -i nerd
vim ~/.config/sway/config
vim ~/.config/waybar/style.css
vim ~/.config/alacritty/
vim ~/.config/alacritty/alacritty.toml
ls
cd ..
ls
7z x FiraMono.zip
ls
rm FiraCode.zip
cp *.otf ~/.local/share/fonts/
ls
rm *.otf
rm README.md
rm LICENSE
ls
rm FiraMono.zip
ls
fc-cache -fv
fc-list | bat | grep -i fira
fc-list | bat | grep -i firamono
vim ~/.config/alacritty/alacritty.toml
ls
vim
vim ~/.config/nvim/lua/plugins/treesitter.lua
vim $nu.env-path
clear
vim ~/.config/nvim/lua/plugins/treesitter.lua
vim ~/.config/nvim/lua/plugins/nvim-lspconfig.lua
vim ~/.config/nvim/init.lua
vim ~/.config/nvim/lua/plugins/nvim-lspconfig.lua
vim $nu.env-path
vim ~/.config/nvim/lua/plugins/treesitter.lua
sudo poweroff 
date now
sudo pkill chronyd
sudo chronyd
date now
cd git
git clone https://github.com/0x192/universal-android-debloater.git
cd universal-android-debloater/
ls
cd Down
ls
chmod +x uad-ng-linux
./uad-ng-linux
adb devices
tldr cargo build
cd git
vim $nu.env-path
cd universal-android-debloater/
cargo build --release
xi clang
cargo build --release
xrs mold
xi mold
xrs carapace
cargo build --release
ls
git status
cd ~/.cargo/bin/
ls
cd git
cd universal-android-debloater/
ls
vim Cargo.toml
ls
ls .gitignore
cat .gitignore
cd target/release/build/ls
cd target/release/build/
ls
cd ..
ls
adb devices
./uad_gui
./uad_gui -vulkan
cd ..
ls
cd ..
cargo build --features glow --release
./target/release/uad_gui
pkill uad_gui
./target/release/uad_gui
pkill uad_gui
cd Dow
ls
rm -rf FiraCode/
mkdir uad ; tar xvvf uad_gui-linux.tar.gz -C uad
ls uad/
cd uad/
ls
./uad_gui-linux
cd ..
ls
rm -rf uad/
rm uad_gui-linux.tar.gz
cd git ; git clone https://github.com/Universal-Debloater-Alliance/universal-android-debloater-next-generation.git
ls
rm -rf universal-android-debloater/
cd universal-android-debloater-next-generation/
ls
cd book
ls
cd book/ls
cd book/
ls
open index.html
start index.html
sensors
cargo build --release
./target/release/uad-ng
zathura
dbus-run-session sway
$env.WLR_RENDERER
date now
fastfetch
ls
cd git
ls
cd nushell.github.io/
ls
http-server
npm install -g http-server
sudo npm install -g http-server
http-server
cd book/
ls
http-server
ls
cd ..
ls | where type == "*.html"
ls | where type == "*.md"
ls | where type == ".md"
ls | where type =~ .md
ls | where type =~ ".md"
ls | where type =~ "*.md"
ls | where type =~ ".md"
cd book/
ls | where type =~ ".md"
where -h
ls | where type == md
ls | where type == file
where -h
where type --help
cd ..
ls | where name =~ "*.md"
ls | where name =~ ".md"
ls -a | where name =~ ".md"
help ls
ls -f
eza
ls *.md
ls **/*.md
ls **/*.html
find 
help find
find -h
^find . -name "*.html"
^find . -name "*.md"
vim $nu.env-path
vim $nu.config-path
WLR_RENDERER=vulkan dbus-run-session sway
exit
xi carapace
ls
$(env.PATH)
$($env.PATH)
$"($env.PATH)"
$"($env.PATH)" | print -
$"($env.PATH)" | print 
ls /tmp/**-runtime-dir
ls /tmp/** | grep "*-runtime-dir"
ls /tmp/** | grep *runtime-dir
ls /tmp/** | grep *-runtime-dir
ls /tmp/** | grep runtime
ls /tmp/** | grep runtime | is-empty
vim $nu.config-path
vim $nu.env-path
id -u krabs
ls
ls -a
vim .bash_profile 
vim .bashrc 
xrs qbittorrent
xi qbittorent-nox
xi qbittorrent-nox
echo $1
echo $env.1
print ($env.PATH)
echo ($env.PATH)
zathura
sensors
ps
nmcli connect show
sudo nmcli connect down wgxd
sensors
sudo nmcli connect down wgxd
sensors
vim .zoxide.nu 
sensors
ps aux
ps
sensors
vim ~/.config/waybar/style.css 
vim ~/.config/waybar/config 
sensors
WLR_RENDERER=vulkan dbus-run-session sway
exit
$env.WLR_RENDERER
sensors
$env.WLR_RENDERER
sensors
dbus-run-session sway
$env.WLR_DRM_NO_ATOMIC
sensors
xi wine
xrs purebasic
xrs baisc
xrs basic
vim ~/.config/alacritty/alacritty.toml 
ls
clear
sensors
sudo wg
sudo nmcli connect up wgxd
sudo wg
cd DOwn
7z x CodeNewRoman.zip -o*
7z x Cousine.zip -o*
7z x DroidSansMono.zip -o*
ls Cousine/
cp Cousine/CousineNerdFontMono-Regular.ttf ~/.local/share/fonts/.
fc-cache -fv
fc-list | bat | grep -i cousine
vim ~/.config/alacritty/alacritty.toml 
ls
nvim
vim
ls | where type == dir
cd DroidSansMono/
ls
7z x DroidSansMNerdFontMono-Regular.otf ~/.local/share/fonts/
cp DroidSansMNerdFontMono-Regular.otf ~/.local/share/fonts/
ls ~/.local/share/fonts/
fc-cache -fv
fc-list | bat | grep -i droid
vim ~/.config/alacritty/alacritty.toml 
cd down
ls
rm Iosevka.5wFPOgiP.zip.part
rm Iosevka.zip
sudo nmcli connect down wgxd
vim ~/.config/alacritty/alacritty.toml 
cd ~/.local/share/fonts
ls
rm FiraCode*
ls
rm FiraMono*
ls
vim
xbps-query -f rust-src
vim $nu.env-path
sensors
cd void-packages
ls
./xbps-src pkg wine
./xbps-src --help
./xbps-src show-options wine
./xbps-src -o staging,wow64 pkg wien
sensors
cat /proc/modules 
cat /proc/modules | grep ntsync
modprobed-db store 
vim ~/.config/modprobed.db 
vim ~/.config/nvim/lua/plugins/mini.lua 
vim
vim ~/.config/nvim/lua/plugins/mini.lua 
sensors
./xbps-src -o staging,wow64 pkg wine
vim ~/.config/nvim/lua/plugins/mini.lua 
nvim
xi wine
wine --version
cd
winecfg
cd Downloads/
ls
wine ndp48-x86-x64-allos-enu.exe 
wine -q -f ndp48-x86-x64-allos-enu.exe 
winetricks -q -f corefonts dotnet48
xi winetricks
sensors
winetricks -q -f corefonts dotnet48
^cd .config/
xrs qbittorrent
cd Dow
ls
7z x Terraria.Build.9965506.Linux64.Public.7z -o*
cd Terraria.Build.9965506.Linux64.Public/
ls
cd steamapps/common/Terraria/
ls
./Terraria
chmod +x Terraria 
./Terraria
ls
chmod +x Terraria.bin.x86_64 
./Terraria.bin.x86_64
ls lib64/
qbittorrent-nox 
mv lib64/libsteam_api.so lib64/libsteam_api.so.bak
./Terraria.bin.x86_64
cd ..
ls
cd ..
ls
cd ..
rm -r Terraria.Build.9965506.Linux64.Public/
ls
sensors
cd Downloads/
ls
./terraria_v1_4_4_9_v4_60321.sh
chmod +x ./terraria_v1_4_4_9_v4_60321.sh
./terraria_v1_4_4_9_v4_60321.sh
sensors
cd `~/GOG Games/`
ls
cd Terraria/
ls
./start.sh
vim start.sh 
./sta
./start.sh
vim start.sh 
FNA3D_FORCE_DRIVER=vulkan ./start.sh
cd git
git clone --recursive https://github.com/FNA-XNA/FNA3D.git
tldr ninja
xrs meson
xi meson
ls
cd FNA3D/
ls
tldr ninja
meson build/
mkdir build
meson build/
ls
ninja -C build/
xi cmake
cd build/
ls
cmake ../
make
cd ..
make
cd build/
ls
xrs sdl3
xi sdl3-devel
xi SDL3-devel
make
ls
ls `~/GOG Games/Terraria/game/lib64/`
cp libFNA3D.so.0.25.06 `~/GOG Games/Terraria/game/lib64/libFNA3D.so.0`
cd Terr
ls
./start.sh
ls game/lib64/
ls generated/
cp libFNA3D.so.0 `~/GOG Games/Terraria/game/lib64/libFNA3D.so.0`
./start.sh
cp libFNA3D.so.0.25.06 `~/GOG Games/Terraria/game/lib64`
cp libFNA3D.so `~/GOG Games/Terraria/game/lib64`
ls game/lib64/
./start.sh
xrs sdl2
xbps-query -f SDL2
xi SDL2_image
xbps-query -f SDL2_image
xbps-query -f SDL2
cp /usr/lib/libSDL2-2.0.so.0 game/lib64/libSDL2-2.0.so.0
cp /usr/lib/libSDL2_image-2.0.so.0 game/lib64/
ls game/lib64/
./start.sh
make
ls
ls game/lib64/
stat libFNA3D.so.0 
stat game/lib64/libSDL2-2.0.so.0 
stat game/lib64/libvorbis.so.0 
stat game/lib64/libtheorafile.so 
chmod 0775 *
stat game/lib64/libFNA3D.so.0 
stat game/lib64/libSDL2-2.0.so.0 
ls
./start.sh
xrs mesa
xi mesa-ati-dri
xrs vulkan
xi mesa-vulkan-overlay-layer
FNA3D_FORCE_DRIVER=SDL_GPU ./start.sh
FNA3D_FORCE_DRIVER=vulkan ./start.sh
FNA3D_FORCE_DRIVER=SDL_GPU ./start.sh
vim start.sh 
vim start.sh 
./start.sh
vim start.sh 
./start.sh
vim start.sh 
cd game/
ls
./Terraria /gldevice:Vulkan
./Terraria 
FNA3D_FORCE_DRIVER=Vulkan ./Terraria 
FNA3D_FORCE_DRIVER=vulkan ./Terraria 
./Terraria /gldevice:OpenGL
./Terraria /gldevice:Vulkan
.ls
ls 
cd ..
ls
cd ..
ls
cd ..
rm `GOG Games/`
rm -rf `GOG Games/`
cd DOw
./terraria_v1_4_4_9_v4_60321.sh
cd
cd `GOG Games/`
ls
cd Terraria/
vim start.sh 
cd game/
ls
./Terraria /gldevice:Vulkan
cp -r lib64/ lib64b
ls
ls lib64/
SDL_AUDIODRIVER=alsa SDL_VIDEODRIVER=wayland ./Terraria /gldevice:Vulkan
SDL_AUDIODRIVER=pipewire SDL_VIDEODRIVER=wayland ./Terraria /gldevice:Vulkan
xi xwininfo
xwininfo
SDL_AUDIODRIVER=pulseaudio SDL_VIDEODRIVER=wayland ./Terraria /gldevice:Vulkan
/
cd game
ls
cd Terraria/
cd game
ls
cd ..
ls
cd ..
cd ..
l
ls
rm build/
git submodule sync 
git submodule update
git status
rm build/
rm -r build/
ls
mkdir build
cd build/
cmake ../
build
make
vim Makefile 
vim ../.gitignore 
cd ..
ls 
ls src/
vim .gitignore 
rm -r build/
meson build
cd void-packages
ls
cd build/
ls
cmake ../
ls
make
xrs sdl3
xbps-query -f SDL3
ls
cp libFNA3D.so* `~/GOG Games/Terraria/game/lib64`
cp /usr/lib/libSDL3.so*  `~/GOG Games/Terraria/game/lib64`
cd Terraria/game/lib64/
ls
rm libSDL2*
ls
cd ..
./Terraria /gldevice:Vulkan
xbps-query -f SDL3_devel
xbps-query -f SDL3-devel
xrs shader
xrs mojo
./Terraria /gldevice:Vulkan
cd git
ls
git clone https://github.com/libsdl-org/SDL_shadercross.git
cd SDL_shadercross/
ls
mkdir build
cd build/
cmake ../
xrs spirv
xi SPIRV-Headers
cmake ../
cd ..
ls
rm -r build/
ls
ls -a
vim .gitignore 
cd ..
rm -r SDL_shadercross/
git clone --recursive https://github.com/libsdl-org/SDL_shadercross.git
mkdir build
cd build/
ls
cmake ../
ls
cd ..
rm -r build/
ls
cd SDL_shadercross/
mkdir build
cd build/
cmake ../
cd ..
ls
vim CMakeLists.txt 
ls external/**
cd void-packages
srcpkgs/
cd SDL3-devel
ls
vim template 
cd git
cd SDL_shadercross/
ls
rm -r build/
ls
cmake -S . -B build
xrs spirv
xrs SPIRV-LLVM-Translator
xi SPIRV-LLVM-Translator
xi SPIRV-LLVM-Translator-devel
cd git
git clone --recursive https://github.com/KhronosGroup/SPIRV-Cross.git
cd SPIRV-Cross/
ls
cmake -S . -B build
cd void-packages
ls
cmake --build build
vim srcpkgs/SDL3/template 
vim srcpkgs/SDL3-devel/template 
ls /usr/local/
sudo cmake --install build --prefix /usr
ls /usr
spirv-cross 
cd
cd gitr
cd git
ls
SDL_shadercross/
cmake -S . -B build
vim CMakeLists.txt 
ls
ls **
help where
ls ** | where name =~ '(?i)spirv'
ls ** | where name =~ '.cmake'
ls ** | where name =~ '*.cmake'
ls ** | where name =~ *.cmake
ls ** | where name =~ .cmake
vim CMakeLists.txt 
rg --files | rg shadercross
vim cmake/SDL3_shadercrossConfig.cmake.in 
sudo chsh -s /usr/bin/zsh krabs
ls
WLR_DRM_NO_ATOMIC=1 WLR_RENDERER=vulkan dbus-run-session sway
exit
ls
sudo chsh -s /usr/bin/zsh krabs
sudo reboot 
$env
vim env-zsh 
vim $nu.config-path
vim env-zsh 
vim $nu.config-path
vim $nu.env-path
vim env-zsh 
manpath
man javac
man sd 
ls /usr/share/man/
vim env-zsh 
ls /usr/lib/jvm/openjdk17/man/
ls /usr/lib/jvm/openjdk17/man/man1/
ls /usr/share/man/
ls /usr/share/man/man1/
which man
vim $nu.config-path
cheatsh javac
tldr javac
cheatsh nu
cheatsh man
xrs cheatsh
xi cheat
cheat 
cheat mkdir
cheat javac
javac -help
sudo xbps-remove cheat
clear
ls
vim ~/.config/sway/
vim ~/.config/sway/config 
help exec
man 5 sway
xrs wlroots
xi wlroots0.19-devel
vim ~/.config/sway/config 
vim $nu.config-path
vim ~/.config/sway/config 
sudo nmcli connect down wgxd
sudo wf
sudo wg
nmap retracker.local
nmap rutracker.local
sensors
xrs tls
exit
cd Downloads/
ls
vim ~/.config/cheat/
vim ~/.config/alacritty/alacritty.toml 
adb devices
adb push ~/Downloads/Iosevka.zip /sdcard/Download
adb push ~/Downloads/Cousine/CousineNerdFontMono-Regular.ttf /sdcard/Download
exit
firef
ls
sls
ls **
ls
let string_list = "1. Welcome to the Performance-Aware Programming Series!<\n>2. Waste<\n>3. Instructions Per Clock<\n>4. Monday Q&A (2023-02-05)<\n>5. Single Instruction, Multiple Data<\n>6. Caching<\n>7. Monday Q&A #2 (2023-02-12)<\n>8. Multithreading<\n>9. Python Revisited<\n>10. Monday Q&A #3 (2023-02-20)<\n>11. The Haversine Distance Problem<\n>12. Instruction Decoding on the 8086<\n>13. Decoding Multiple Instructions and Suffixes<\n>14. Monday Q&A #4 (2023-03-06)<\n>15. Opcode Patterns in 8086 Arithmetic<\n>16. Monday Q&A #5 (2023-03-13)<\n>17. 8086 Decoder Code Review<\n>18. Monday Q&A #6 (2023-03-20)<\n>19. Using the Reference Decoder as a Shared Library<\n>20. Simulating Non-memory MOVs<\n>21. Simulating ADD, SUB, and CMP<\n>22. Simulating Conditional Jumps<\n>23. Monday Q&A #7 (2023-04-10)<\n>24. Simulating Memory<\n>25. Simulating Real Programs<\n>26. Monday Q&A #8 (2023-04-17)<\n>27. Other Common Instructions<\n>28. The Stack<\n>29. Monday Q&A #9 (2023-04-24)<\n>30. Estimating Cycles<\n>31. Monday Q&A #10 (2023-05-08)<\n>32. From 8086 to x64<\n>33. Monday Q&A #11 (2023-05-15)<\n>34. 8086 Simulation Code Review<\n>35. Monday Q&A #12 (2023-05-22)<\n>36. Generating Haversine Input JSON<\n>37. Monday Q&A #13 (2023-05-29)<\n>38. Writing a Simple Haversine Distance Processor<\n>39. Monday Q&A #14 (2023-06-05)<\n>40. Initial Haversine Processor Code Review<\n>41. Monday Q&A #15 (2023-06-12)<\n>42. Introduction to RDTSC<\n>43. Monday Q&A #16 (2023-06-19)<\n>44. Monday Q&A #17 (2023-06-26)<\n>45. Instrumentation-Based Profiling<\n>46. Monday Q&A #18 (2023-07-03)<\n>47. Profiling Nested Blocks<\n>48. Monday Q&A #19 (2023-07-10)<\n>49. Profiling Recursive Blocks<\n>50. Monday Q&A #20 (2023-07-17)<\n>51. A First Look at Profiling Overhead<\n>52. Comparing the Overhead of RDTSC and QueryPerformanceCounter<\n>53. Monday Q&A #21 (2023-07-31)<\n>54. Q&A #22 (2023-08-15)<\n>55. Measuring Data Throughput<\n>56. Q&A #23 (2023-08-21)<\n>57. Repetition Testing<\n>58. Q&A #24 (2023-08-28)<\n>59. Monitoring OS Performance Counters<\n>60. Q&A #25 (2023-09-04)<\n>61. Page Faults<\n>62. Q&A #26 (2023-09-11)<\n>63. Probing OS Page Fault Behavior<\n>64. Q&A #27 (2023-09-18)<\n>65. Four-Level Paging<\n>66. Q&A #28 (2023-09-25)<\n>67. Analyzing Page Fault Anomalies<\n>68. Q&A #29 (2023-10-02)<\n>69. Q&A #30 (2023-10-09)<\n>70. Faster Reads with Large Page Allocations<\n>71. Q&A #31 (2023-10-23)<\n>72. Memory-Mapped Files<\n>73. Q&A #32 (2023-10-30)<\n>74. Inspecting Loop Assembly<\n>75. Q&A #33 (2023-11-06)<\n>76. Q&A #34 (2023-11-13)<\n>77. Analyzing Dependency Chains<\n>78. Q&A #35 (2023-11-20)<\n>79. Linking Directly to ASM for Experimentation<\n>80. Q&A #36 (2023-11-27)<\n>81. CPU Front End Basics<\n>82. Q&A #37 (2023-12-04)<\n>83. Branch Prediction<\n>84. Q&A #38 (2023-12-11)<\n>85. Code Alignment<\n>86. Q&A #39 (2024-01-09)<\n>87. Q&A #40 (2024-01-18)<\n>88. The RAT and the Register File<\n>89. Q&A #41 (2024-01-23)<\n>90. Q&A #42 (2024-01-29)<\n>91. Execution Ports and the Scheduler<\n>92. Q&A #43 (2024-02-06)<\n>93. Increasing Read Bandwidth with SIMD Instructions<\n>94. Q&A #44 (2024-02-26)<\n>95. Cache Size and Bandwidth Testing<\n>96. Q&A #45 (2024-03-04)<\n>97. Non-Power-of-Two Cache Size Testing<\n>98. Q&A #46 (2024-03-11)<\n>99. Latency and Throughput, Again<\n>100. Q&A #47 (2024-03-18)<\n>101. Unaligned Load Penalties<\n>102. Q&A #48 (2024-03-25)<\n>103. Q&A #49 (2024-04-02)<\n>104. Q&A #50 (2024-04-08)<\n>105. Cache Sets and Indexing<\n>106. Q&A #51 (2024-04-18)<\n>107. Q&A #52 (2024-04-29)<\n>108. Non-temporal Stores<\n>109. Q&A #53 (2024-05-06)<\n>110. Prefetching<\n>111. Q&A #54 (2024-05-13)<\n>112. Q&A #55 (2024-05-20)<\n>113. Q&A #56 (2024-06-10)<\n>114. Prefetching Wrap-up<\n>115. Q&A #57 (2024-06-17)<\n>116. 2x Faster File Reads<\n>117. Q&A #58 (2024-06-24)<\n>118. Overlapping File Reads with Computation<\n>119. Q&A #59 (2024-07-15)<\n>120. A Closer Look at the Prefetching Performance Graph<\n>121. Q&A #60 (2024-07-22)<\n>122. Q&A #61 (2024-07-30)<\n>123. Testing Memory-Mapped Files<\n>124. Q&A #62 (2024-08-08)<\n>125. Q&A #63 (2024-08-19)<\n>126. Q&A #64 (2024-08-26)<\n>127. Q&A #65 (2024-09-09)<\n>128. Q&A #66 (2024-10-01)<\n>129. Real-time PMCs on Windows with ETW<\n>130. Q&A #67 (2024-11-18)<\n>131. Reference Haversine Code<\n>132. Identifying Non-inlined Math Functions<\n>133. Determining Input Ranges<\n>134. Q&A #68 (2025-01-06)<\n>135. Q&A #69 (2025-01-13)<\n>136. Introduction to SSE Intrinsics<\n>" | split row "."
$string_list
help str
let string_list = "1. Welcome to the Performance-Aware Programming Series!<\n>2. Waste<\n>3. Instructions Per Clock<\n>4. Monday Q&A (2023-02-05)<\n>5. Single Instruction, Multiple Data<\n>6. Caching<\n>7. Monday Q&A #2 (2023-02-12)<\n>8. Multithreading<\n>9. Python Revisited<\n>10. Monday Q&A #3 (2023-02-20)<\n>11. The Haversine Distance Problem<\n>12. Instruction Decoding on the 8086<\n>13. Decoding Multiple Instructions and Suffixes<\n>14. Monday Q&A #4 (2023-03-06)<\n>15. Opcode Patterns in 8086 Arithmetic<\n>16. Monday Q&A #5 (2023-03-13)<\n>17. 8086 Decoder Code Review<\n>18. Monday Q&A #6 (2023-03-20)<\n>19. Using the Reference Decoder as a Shared Library<\n>20. Simulating Non-memory MOVs<\n>21. Simulating ADD, SUB, and CMP<\n>22. Simulating Conditional Jumps<\n>23. Monday Q&A #7 (2023-04-10)<\n>24. Simulating Memory<\n>25. Simulating Real Programs<\n>26. Monday Q&A #8 (2023-04-17)<\n>27. Other Common Instructions<\n>28. The Stack<\n>29. Monday Q&A #9 (2023-04-24)<\n>30. Estimating Cycles<\n>31. Monday Q&A #10 (2023-05-08)<\n>32. From 8086 to x64<\n>33. Monday Q&A #11 (2023-05-15)<\n>34. 8086 Simulation Code Review<\n>35. Monday Q&A #12 (2023-05-22)<\n>36. Generating Haversine Input JSON<\n>37. Monday Q&A #13 (2023-05-29)<\n>38. Writing a Simple Haversine Distance Processor<\n>39. Monday Q&A #14 (2023-06-05)<\n>40. Initial Haversine Processor Code Review<\n>41. Monday Q&A #15 (2023-06-12)<\n>42. Introduction to RDTSC<\n>43. Monday Q&A #16 (2023-06-19)<\n>44. Monday Q&A #17 (2023-06-26)<\n>45. Instrumentation-Based Profiling<\n>46. Monday Q&A #18 (2023-07-03)<\n>47. Profiling Nested Blocks<\n>48. Monday Q&A #19 (2023-07-10)<\n>49. Profiling Recursive Blocks<\n>50. Monday Q&A #20 (2023-07-17)<\n>51. A First Look at Profiling Overhead<\n>52. Comparing the Overhead of RDTSC and QueryPerformanceCounter<\n>53. Monday Q&A #21 (2023-07-31)<\n>54. Q&A #22 (2023-08-15)<\n>55. Measuring Data Throughput<\n>56. Q&A #23 (2023-08-21)<\n>57. Repetition Testing<\n>58. Q&A #24 (2023-08-28)<\n>59. Monitoring OS Performance Counters<\n>60. Q&A #25 (2023-09-04)<\n>61. Page Faults<\n>62. Q&A #26 (2023-09-11)<\n>63. Probing OS Page Fault Behavior<\n>64. Q&A #27 (2023-09-18)<\n>65. Four-Level Paging<\n>66. Q&A #28 (2023-09-25)<\n>67. Analyzing Page Fault Anomalies<\n>68. Q&A #29 (2023-10-02)<\n>69. Q&A #30 (2023-10-09)<\n>70. Faster Reads with Large Page Allocations<\n>71. Q&A #31 (2023-10-23)<\n>72. Memory-Mapped Files<\n>73. Q&A #32 (2023-10-30)<\n>74. Inspecting Loop Assembly<\n>75. Q&A #33 (2023-11-06)<\n>76. Q&A #34 (2023-11-13)<\n>77. Analyzing Dependency Chains<\n>78. Q&A #35 (2023-11-20)<\n>79. Linking Directly to ASM for Experimentation<\n>80. Q&A #36 (2023-11-27)<\n>81. CPU Front End Basics<\n>82. Q&A #37 (2023-12-04)<\n>83. Branch Prediction<\n>84. Q&A #38 (2023-12-11)<\n>85. Code Alignment<\n>86. Q&A #39 (2024-01-09)<\n>87. Q&A #40 (2024-01-18)<\n>88. The RAT and the Register File<\n>89. Q&A #41 (2024-01-23)<\n>90. Q&A #42 (2024-01-29)<\n>91. Execution Ports and the Scheduler<\n>92. Q&A #43 (2024-02-06)<\n>93. Increasing Read Bandwidth with SIMD Instructions<\n>94. Q&A #44 (2024-02-26)<\n>95. Cache Size and Bandwidth Testing<\n>96. Q&A #45 (2024-03-04)<\n>97. Non-Power-of-Two Cache Size Testing<\n>98. Q&A #46 (2024-03-11)<\n>99. Latency and Throughput, Again<\n>100. Q&A #47 (2024-03-18)<\n>101. Unaligned Load Penalties<\n>102. Q&A #48 (2024-03-25)<\n>103. Q&A #49 (2024-04-02)<\n>104. Q&A #50 (2024-04-08)<\n>105. Cache Sets and Indexing<\n>106. Q&A #51 (2024-04-18)<\n>107. Q&A #52 (2024-04-29)<\n>108. Non-temporal Stores<\n>109. Q&A #53 (2024-05-06)<\n>110. Prefetching<\n>111. Q&A #54 (2024-05-13)<\n>112. Q&A #55 (2024-05-20)<\n>113. Q&A #56 (2024-06-10)<\n>114. Prefetching Wrap-up<\n>115. Q&A #57 (2024-06-17)<\n>116. 2x Faster File Reads<\n>117. Q&A #58 (2024-06-24)<\n>118. Overlapping File Reads with Computation<\n>119. Q&A #59 (2024-07-15)<\n>120. A Closer Look at the Prefetching Performance Graph<\n>121. Q&A #60 (2024-07-22)<\n>122. Q&A #61 (2024-07-30)<\n>123. Testing Memory-Mapped Files<\n>124. Q&A #62 (2024-08-08)<\n>125. Q&A #63 (2024-08-19)<\n>126. Q&A #64 (2024-08-26)<\n>127. Q&A #65 (2024-09-09)<\n>128. Q&A #66 (2024-10-01)<\n>129. Real-time PMCs on Windows with ETW<\n>130. Q&A #67 (2024-11-18)<\n>131. Reference Haversine Code<\n>132. Identifying Non-inlined Math Functions<\n>133. Determining Input Ranges<\n>134. Q&A #68 (2025-01-06)<\n>135. Q&A #69 (2025-01-13)<\n>136. Introduction to SSE Intrinsics<\n>" | str length
$string_list
let string_list = "1. Welcome to the Performance-Aware Programming Series!<\n>2. Waste<\n>3. Instructions Per Clock<\n>4. Monday Q&A (2023-02-05)<\n>5. Single Instruction, Multiple Data<\n>6. Caching<\n>7. Monday Q&A #2 (2023-02-12)<\n>8. Multithreading<\n>9. Python Revisited<\n>10. Monday Q&A #3 (2023-02-20)<\n>11. The Haversine Distance Problem<\n>12. Instruction Decoding on the 8086<\n>13. Decoding Multiple Instructions and Suffixes<\n>14. Monday Q&A #4 (2023-03-06)<\n>15. Opcode Patterns in 8086 Arithmetic<\n>16. Monday Q&A #5 (2023-03-13)<\n>17. 8086 Decoder Code Review<\n>18. Monday Q&A #6 (2023-03-20)<\n>19. Using the Reference Decoder as a Shared Library<\n>20. Simulating Non-memory MOVs<\n>21. Simulating ADD, SUB, and CMP<\n>22. Simulating Conditional Jumps<\n>23. Monday Q&A #7 (2023-04-10)<\n>24. Simulating Memory<\n>25. Simulating Real Programs<\n>26. Monday Q&A #8 (2023-04-17)<\n>27. Other Common Instructions<\n>28. The Stack<\n>29. Monday Q&A #9 (2023-04-24)<\n>30. Estimating Cycles<\n>31. Monday Q&A #10 (2023-05-08)<\n>32. From 8086 to x64<\n>33. Monday Q&A #11 (2023-05-15)<\n>34. 8086 Simulation Code Review<\n>35. Monday Q&A #12 (2023-05-22)<\n>36. Generating Haversine Input JSON<\n>37. Monday Q&A #13 (2023-05-29)<\n>38. Writing a Simple Haversine Distance Processor<\n>39. Monday Q&A #14 (2023-06-05)<\n>40. Initial Haversine Processor Code Review<\n>41. Monday Q&A #15 (2023-06-12)<\n>42. Introduction to RDTSC<\n>43. Monday Q&A #16 (2023-06-19)<\n>44. Monday Q&A #17 (2023-06-26)<\n>45. Instrumentation-Based Profiling<\n>46. Monday Q&A #18 (2023-07-03)<\n>47. Profiling Nested Blocks<\n>48. Monday Q&A #19 (2023-07-10)<\n>49. Profiling Recursive Blocks<\n>50. Monday Q&A #20 (2023-07-17)<\n>51. A First Look at Profiling Overhead<\n>52. Comparing the Overhead of RDTSC and QueryPerformanceCounter<\n>53. Monday Q&A #21 (2023-07-31)<\n>54. Q&A #22 (2023-08-15)<\n>55. Measuring Data Throughput<\n>56. Q&A #23 (2023-08-21)<\n>57. Repetition Testing<\n>58. Q&A #24 (2023-08-28)<\n>59. Monitoring OS Performance Counters<\n>60. Q&A #25 (2023-09-04)<\n>61. Page Faults<\n>62. Q&A #26 (2023-09-11)<\n>63. Probing OS Page Fault Behavior<\n>64. Q&A #27 (2023-09-18)<\n>65. Four-Level Paging<\n>66. Q&A #28 (2023-09-25)<\n>67. Analyzing Page Fault Anomalies<\n>68. Q&A #29 (2023-10-02)<\n>69. Q&A #30 (2023-10-09)<\n>70. Faster Reads with Large Page Allocations<\n>71. Q&A #31 (2023-10-23)<\n>72. Memory-Mapped Files<\n>73. Q&A #32 (2023-10-30)<\n>74. Inspecting Loop Assembly<\n>75. Q&A #33 (2023-11-06)<\n>76. Q&A #34 (2023-11-13)<\n>77. Analyzing Dependency Chains<\n>78. Q&A #35 (2023-11-20)<\n>79. Linking Directly to ASM for Experimentation<\n>80. Q&A #36 (2023-11-27)<\n>81. CPU Front End Basics<\n>82. Q&A #37 (2023-12-04)<\n>83. Branch Prediction<\n>84. Q&A #38 (2023-12-11)<\n>85. Code Alignment<\n>86. Q&A #39 (2024-01-09)<\n>87. Q&A #40 (2024-01-18)<\n>88. The RAT and the Register File<\n>89. Q&A #41 (2024-01-23)<\n>90. Q&A #42 (2024-01-29)<\n>91. Execution Ports and the Scheduler<\n>92. Q&A #43 (2024-02-06)<\n>93. Increasing Read Bandwidth with SIMD Instructions<\n>94. Q&A #44 (2024-02-26)<\n>95. Cache Size and Bandwidth Testing<\n>96. Q&A #45 (2024-03-04)<\n>97. Non-Power-of-Two Cache Size Testing<\n>98. Q&A #46 (2024-03-11)<\n>99. Latency and Throughput, Again<\n>100. Q&A #47 (2024-03-18)<\n>101. Unaligned Load Penalties<\n>102. Q&A #48 (2024-03-25)<\n>103. Q&A #49 (2024-04-02)<\n>104. Q&A #50 (2024-04-08)<\n>105. Cache Sets and Indexing<\n>106. Q&A #51 (2024-04-18)<\n>107. Q&A #52 (2024-04-29)<\n>108. Non-temporal Stores<\n>109. Q&A #53 (2024-05-06)<\n>110. Prefetching<\n>111. Q&A #54 (2024-05-13)<\n>112. Q&A #55 (2024-05-20)<\n>113. Q&A #56 (2024-06-10)<\n>114. Prefetching Wrap-up<\n>115. Q&A #57 (2024-06-17)<\n>116. 2x Faster File Reads<\n>117. Q&A #58 (2024-06-24)<\n>118. Overlapping File Reads with Computation<\n>119. Q&A #59 (2024-07-15)<\n>120. A Closer Look at the Prefetching Performance Graph<\n>121. Q&A #60 (2024-07-22)<\n>122. Q&A #61 (2024-07-30)<\n>123. Testing Memory-Mapped Files<\n>124. Q&A #62 (2024-08-08)<\n>125. Q&A #63 (2024-08-19)<\n>126. Q&A #64 (2024-08-26)<\n>127. Q&A #65 (2024-09-09)<\n>128. Q&A #66 (2024-10-01)<\n>129. Real-time PMCs on Windows with ETW<\n>130. Q&A #67 (2024-11-18)<\n>131. Reference Haversine Code<\n>132. Identifying Non-inlined Math Functions<\n>133. Determining Input Ranges<\n>134. Q&A #68 (2025-01-06)<\n>135. Q&A #69 (2025-01-13)<\n>136. Introduction to SSE Intrinsics<\n>" | str length
$string_list
vim xdscript
help each
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
help filter
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
help split
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
help split
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
help split
vim xdscript.nu
nu xdscript.nu 
help split chars
help split 
help split column
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
help split row
vim xdscript.nu
nu xdscript.nu 
vim xdscript.nu
nu xdscript.nu 
help split row
vim xdscript.nu 
nu xdscript.nu 
vim xdscript.nu 
nu xdscript.nu 
vim xdscript.nu 
nu xdscript.nu 
vim xdscript.nu 
mv xdscript.nu compenhanced.txt
"1. Banana, 2. Dog, 3. Cat" | split row --regex "^/d*."
"1. Banana, 2. Dog, 3. Cat" | split row --regex "^/d+"
"1. Banana, 2. Dog, 3. Cat" | split row --regex "/d+"
"1. Banana, 2. Dog, 3. Cat" | split row --regex '/d+'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '^\d*.'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '^\d+'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '*\d+'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '^\d+'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.\,'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.,'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.\s'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.\s*'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.\s,'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.\s'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.,\s*'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.(,\s*)'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\. ,'
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.' | split row ","
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.' | print | split row ","
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.' | print 
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.' | split row ","
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.' | split row "," | to txt
"1. Banana, 2. Dog, 3. Cat" | split row --regex '\d+\.' | split row "," | to csv
help to
xi mpv
vim compenhanced.txt 
keybindings list 
keybindings default 
clear
keybindings default 
open ~/.config/alacritty/alacritty.toml | lines | last 10
help lines
cp compenhanced.txt ~/Downloads/ComputerEnhanceLQ/.
cd Downloads/ComputerEnhanceLQ/
ls
clear
mpv --playlist=compenhanced.txt 
ls
vim compenhanced.txt 
mpv --playlist=compenhanced.txt 
vim compenhanced.txt 
mpv --playlist=compenhanced.txt 
vim compenhanced.txt 
mpv --playlist=compenhanced.txt 
qbittorrent-nox 
sudo poweroff 
sudo chronyd
date now
sudo pkill chronyd
sudo chronyd
date now
vim .config/nvim/lua/plugins/colors.lua 
vim .config/nvim/lua/opts.lua 
vim .config/nvim/lua/plugins/telescope.lua 
vim .config/nvim/lua/plugins/colors.lua 
vim .config/alacritty/alacritty.toml 
cd Downloads/
ls
7z x Iosevka.zip -o*
cd Iosevka/
ls
cp IosevkaNerdFontMono-Regular.ttf ~/.local/share/fonts/
fc-cache -fv
fc-list | grep -i iosevka
vim ~/.config/alacritty/alacritty.toml 
cd git
ls
cd nushell.github.io/
ls
cd book/
open custom_completions.md
firefox custom_commands.md 
vim custom_commands.md 
nvim
cd Downloads/
./PrismLauncher-Linux-x86_64.AppImage
xrs scx
xrs schedexy
xrs schedext
xrs sched
cat /sys/kernel/sched_ext/state /sys/kernel/sched_ext/*/ops 2>/dev/null
zcat /proc/config.gz | grep BPF
zcat /proc/config.gz | grep SCHED
cd linux-tkg
git pull
git log 10
tldr git log
git log --oneline
./install.sh --install
./install.sh install
vim customization.cfg 
cd 
cd git
ls
cd gcc/
git pull
git log --oneline
git checkout releases/gcc-15.1.0 
git pull
git pull origin origin/releases/gcc-15 
git status
git log --oneline
ls
mkdir objdir
cd objdir/
ls
sensors
xrs zstd
xrs libgmp
xrs gmp
xrs mpfr
xrs mpc
xrs isl
xi isl-devel
/usr/lib/ld-linux-x86-64.so.2
/usr/lib/ld-linux-x86-64.so.2 -h
/usr/lib/ld-linux-x86-64.so.2 --help
xrs gnat
xrs python
xi python3
xi python3-devel
pip 
python3 --version
xrs gccrs
xrs rust
xi glibc-devel
xi autoconf
xrs automake
xrs dejagnu
xi dejagnu flex bison gmp-devel
cd git
ls
cd gcc/
ls
ls objdir/
rm -rf objdir/
cd ..
mkdir gccbuild
cd void-packages
vim srcpkgs/gcc/template 
xi libatomic-devel
xi gcc-devel
xrs gcc devel
xrs "gcc devel"
xrs gcc
sudo wg
xi gcc-multilib gccmakedeps
xi gcc-multilib
xi gccmakedep
xrs gettext
xi gettext-devel
xi gettext-libs
xi gettext
xi gettext-libs
xrs gdb
vim ~/.config/sway/config 
fc-list | grep -i awesome
vim ~/.config/sway/config
vim ~/.config/waybar/style.css 
fc-list | grep -i awesome
vim ~/.config/waybar/style.css 
sensors
git clone https://github.com/Rust-GCC/gccrs.git
cd gccbuild/
../gcc/configure --host=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --enable-checking=release --enable-languages=c,c++,go
ls
sensors
sudo nmcli connect down wgxd
sensors
cd Downloads/
ls
ls | where type == dir
ls **/ | where type == dir
ls | where type == dir
cd `Udemy - Rust The Complete Developer's Guide (10.2024)/01 - Foundations of Rust Setup and First Steps/001 Introduction.mp4`
cd `Udemy - Rust The Complete Developer's Guide (10.2024)/`
ls
vim ~/.config/sway/config
mpv "01 - Foundations of Rust Setup and First Steps/001 Introduction.mp4" 
mpv "01 - Foundations of Rust Setup and First Steps/004 Creating and Running Rust Projects.mp4" 
sl
ls
open `01 - Foundations of Rust Setup and First Steps/005 Disabling Inlay Type Hints.html` | to text
ls
cd `02 - Core Concepts The Building Blocks of Rust/`
ls
open `001 Representing Data with Structs.mp4`
ls
clear
fastfetch
sensors
mpv "001 Representing Data with Structs.mp4" 
help sort
ls | sort -n
ls | sort -n | where type == name
ls | sort -n | where name =~ .mp4
help parse
help find
^find . -name "*.mp4"
^find . -name "*.mp4" | sort -n
^find . -name "*.mp4" | ^sort -n
^find . -name "*.mp4" | ^sort -n | save course.txt
ls
mpv --playlist=course.txt 
ls .mp4
ls | sort -n | where name =~ .mp4
glob **/*.mp4 | sort -n | save bruh.txt
vim bruh.txt 
help glob
ls | sort -n | where name =~ .mp4 | somefile2.txt
ls | sort -n | where name =~ .mp4 | save somefile2.txt
help glob
glob *.mp4
ls -l
vim .config/nvim/lua/opts.lua 
$env.COLORTERM
$env.config.color_config
$env.config.color_config | each { |e| $e | describe }
$env.config.color_config | each {|e| $e | describe }
$env.config.color_config | each {|s| $s | describe }
help use
make
$env.config.color_config.shape_closure = "red"
$env.config.color_config.shape_closure
ls
ls /usr/local/bin/
ls gcc/
make install
sudo make install
/usr/local/bin/gcc --version
cd linux-tkg
vim customization.cfg 
cat git/linux-tkg/customization.cfg | grep usr
./install.sh install
s
ls
cd linux-tkg-patches/
ls
cd ..
ls
mkdir linux615-tkg-userpatches
uname -r
uname a
uname 
cd linux-src-git/
ls
vim $nu.env-path
vim $nu.config-path
git status
git log --oneline
git pull
cd ..
vim customization.cfg 
ps
cd linux-tkg
ls
vim customization.cfg 
cd linux-tkg
vim customization.cfg 
./install.sh install
cd linux-tkg
ls
./install.sh install
cd linux-tkg
ls
ps
cd linux-tkg
ls
vim customization.cfg 
ls ../gccbuild/
vim customization.cfg 
CC="/usr/local/gcc" ./install.sh install
cd linux-src-git/
ls
cp .config ../.
ls
sudo cp arch/x86/boot/bzImage "/efi/EFI/Void Linux/void615.efi" 
vim ~/.zsh_history 
tldr efibootmgr 
sudo efibootmgr -c -d /dev/sda -p 1 -l "/efi/EFI/Void Linux/void615.efi" -L "Void-6.15"
sudo efibootmgr -b 0000 -B
sudo efibootmgr -b 0004 -B
sudo efibootmgr -c -d /dev/sda -p 1 -l "/efi/EFI/Void Linux/void615.efi" -L "Void-6.15"
efibootmgr
sudo efibootmgr -b 0000 -B
sudo efibootmgr -c -d /dev/sda -p 1 -l "\EFI\Void Linux\voidx64.efi" -L "Void-6.15"
sudo efibootmgr -c -d /dev/sda -p 1 -l \EFI\Void Linux\voidx64.efi -L "Void-6.15"
ls `/efi/EFI/Void Linux/`
sudo efibootmgr -b 0000 -B
sudo efibootmgr -c -d /dev/sda -p 1 -l \EFI\Void Linux\void615.efi -L "Void-6.15"
efibootmgr 
sudo reboot 
sudo reboot
vim ~/.zsh_history 
efibootmgr 
sudo efibootmgr -c -d /dev/sda -p 1 -l \EFI\Void Linux\void615.efi -L "Void615"
ls `/efi/EFI/Void Linux/void615.efi`
ls `/efi/EFI/Void Linux/binx64.efi`
sudo reboot 
ls
cd linux-tkg
ls
./install.sh install
cd linux-tkg
vim customization.cfg 
blkid
vim customization.cfg 
cd linux-src-git/
sudo make modules_install
cd ..
ls
man efibootmgr 
sudo efibootmgr -c -d /dev/sda -p 1 -l \EFI\Void Linux\void615.efi -L "Void615"
sudo rm "/efi/EFI/Void Linux/void615.efi" 
sudo cp linux-src-git/arch/x86/boot/bzImage "/efi/EFI/Void Linux/void615.efi" 
sudo efibootmgr -b 0000 -B
sudo efibootmgr -c -d /dev/sda -p 1 -l \EFI\Void Linux\void615.efi -L "Void615"
sudo reboot 
efibootmgr 
sudo chsh -s /usr/bin/zsh krabs
exit
date now
sudo pkill chronyd
sudo chronyd
date now
cd Down
;s
ls
ls | where type == dir
glob */
glob **/
glob * | where type == dir
glob * 
glob /
help glob
ls -d
help ls
help glob
glob */
glob --no-file 
glob * --no-file 
cd `Udemy - Rust The Complete Developer's Guide (10.2024)/`
ls
cd `02 - Core Concepts The Building Blocks of Rust/`
ls
cat course.txt 
cat bruh.txt 
qbittorrent-nox 
cd Down
cd RUst
ls
cd `03 - Ownership and Borrowing Rust's Unique Memory System/`
glob **/*.mp4 | sort -n | save bruh.txt
cd ..
glob **/*.mp4 | sort -n | save bruh.txt
vim bruh.txt 
cd `04 - Lifetimes Explored Understanding Memory Management/`
ls
cd ..
mpv --playlist=bruh.txt 
cd rist
cd rust
ls
vim hello.rs 
rustc hello.rs 
./hello
vim hello.rs 
rustc hello.rs 
vim hello.rs 
rustc hello.rs 
./hello
rustc hello.rs 
vim hello.rs 
cd ..
vim .config/nvim/lua/plugins/nvim-lspconfig.lua 
xi rust-analyzer
sudo xbps-install -Su
wine --version
cd void-packages
git pull
cd rust
vim hello.rs 
rust-analyzer
man rust-analyzer
rust-analyzer --help
cd .config/nvim/lua/plugins/mini.lua
vim .config/nvim/lua/plugins/mini.lua
vim .config/nvim/lua/plugins/nvim-lspconfig.lua 
vim $nu.config-path
cd rust
vim hello.rs 
sensors
rust-analyzer -v
vim hello.rs 
$PATH
vim ~/.local/state/nvim/lsp.log 
sensors
vim $nu.config-path
vim $nu.env-path
$env.PATH
cd rust/
vim hello.rs 
vim ~/.local/state/nvim/lsp.log 
rm ~/.local/state/nvim/lsp.log 
vim rust/hello.rs 
vim ~/.local/state/nvim/lsp.log 
xbps-query rustc
xbps-query rust
xrs clang
vim ~/.local/state/nvim/lsp.log 
xrs pkg-config
xrs libiconv
xi libiconv-devel
vim ~/.local/state/nvim/lsp.log 
mpv --playlist=bruh.txt 
xrs lld
xrs clang
xi lld
./xbps-src -o staging,wow64 pkg wine
clang --version
ls -a /usr/bin/
ls /usr/bin/wasm-ld
stat /usr/bin/wasm-ld
stat /usr/bin/uic-qt5 
cd gccbuild/
cd git/gccb
ls
ls gcc/
ce ..
cd ..
ls -a /usr/bin/
stat /usr/bin/yacc 
which bison-yacc
help which
stat /usr/bin/x86_64-unknown-linux-gnu-gcc 
stat /usr/bin/x86_64-unknown-linux-gnu-c++filt 
cargo install starship --locked
stat /usr/bin/btrfsck 
stat /usr/bin/apropos 
stat /usr/bin/arptables-nft-restore 
apropos 
stat /usr/bin/bunzip2 
stat /usr/bin/corepack 
stat /usr/bin/awk 
stat /usr/bin/assistant 
stat /usr/bin/clang-cl 
stat /usr/bin/clang
stat /usr/bin/clang-17 
xrs starship
sudo xbps-remove starship
vim $nu.config-path
ls
dbus-run-session sway
exit
cd rust/
ls
vim ~/.config/alacritty/alacritty.toml
cp ~/Downloads/Iosevka/IosevkaNerdFontMono* ~/.local/share/fonts
fc-cache -fv
fc-list | grep -i iosevka
cd rust/
sudo reboot 
cd rus
vim ~/.config/alacritty/alacritty.toml
vim $nu.config-path
cd git
ls
cd FNA3D/
cd ..
cd SDL_shadercross/
cd ..
cd void-packages/
ls
cd ..
cd nushell.github.io/
ls
cd ..
ls
cd android-udev-rules/
cd ..
cd gcc/
cd ..
cd gccrs/
ls
ccd libgo/
cd libgo
cd ..
ls
cd
cd rust
ls
rm hello.rs
touch hello.rs
ls
vim hello.rs 
vim ~/.local/state/nvim/lsp.log 
rm hello
cd .
cd ..
ls
vim compenhanced.txt 
cd void-packages
xrs fontconfig
xrs emoji
xi noto-fonts-emoji
cd ryst
cd rust
ls
xrs emoji
cd git
git clone https://github.com/rust-lang/rust.git
ls
cd rust/
ls
cd rust
ls
cd
cd git
cd rust/
which cc
stat cc
stat /usr/bin/cc
./x.py check
./x.py setup
sensors
cat /sys/kernel/sched_ext/state
sensors
ping 1.1.1.1
./x.py dist
ls -a
bat INSTALL.md 
./x.py --help
vim bootstrap.
vim bootstrap.toml 
uname
uname --help
cat /proc/version 
vim bootstrap.example.toml 
./x.py install
./x.py install -v
ls /usr/local/bin/
git status
ls
glob build/**
ls build/
cd build/dist/
ls
cd ..
ls
cd x86_64-unknown-linux-gnu/
ls
cd ..
ls
$env.DESTDIR = "/usr/local"
./x.py install -v
sudo ./x.py install -v
./x.py install -v
vim bootstrap.toml 
rustc --version
$env.PREFIX
rustdoc --version
sl
ls
cd build/
ls
cd dist/
ls
mkdir cargo-nightly-x86_64-unknown-linux-gnu
tar xvvf cargo-nightly-x86_64-unknown-linux-gnu.tar.gz -C cargo-nightly-x86_64-unknown-linux-gnu/
ls cargo-nightly-x86_64-unknown-linux-gnu/
ls cargo-nightly-x86_64-unknown-linux-gnu/cargo-nightly-x86_64-unknown-linux-gnu/
ls
rm -rf cargo-nightly-x86_64-unknown-linux-gnu/
tar xvvf cargo-nightly-x86_64-unknown-linux-gnu.tar.gz
cd cargo-nightly-x86_64-unknown-linux-gnu/
ls
vim install.sh 
./install.sh
sudo ./install.sh
ls
cd ..
ls
tar xvvf clippy-nightly-x86_64-unknown-linux-gnu.tar.gz 
tar xvvf llvm-bitcode-linker-nightly-x86_64-unknown-linux-gnu.tar.gz 
help tar
tldr tar
ls
tar xvvf llvm-tools-nightly-x86_64-unknown-linux-gnu.tar.gz 
ls
tar xvvf *
tar xvvf *.tar
tar xvvf *.tar.gz
glob **/*.tar.gz
glob **/*.tar.gz | sort -n | save krabs.txt
vim krabs.txt 
glob **/*.tar.gz | sort -n | save krabs.nu
vim krabs.nu 
nu krabs.nu 
vim krabs.nu 
nu krabs.nu 
vim krabs.nu 
nu krabs.nu 
vim krabs.nu 
nu krabs.nu 
vim krabs.nu 
^find . -name '*.tar.gz' -execdir tar -xzvf '{}' \;
^find . -name '*.tar.gz' -exec tar -xzvf '{}' \;
^find . -name '*.tar.gz' -exec "tar -xzvf '{}'" \;
^find . -name '*.tar.gz' -exec tar -xzvf '{}' 
man find
^find . -name '*.tar.gz' -exec tar -xzvf '{}' 
^find . -name '*.tar.gz' -exec /usr/bin/tar -xzvf '{}' 
^find . -name '*.tar.gz' -exec /usr/bin/tar xvf '{}' 
^find . -name '*.tar.gz' -exec /usr/bin/tar xvf {} \; 
^find . -name "*.tar.gz" -exec /usr/bin/tar xvf {} \; 
^find . -name "*.tar.gz" -exec 
^find . -name "*.tar.gz" -exec "echo '{}'" ;
^find . -name "*.tar.gz" -exec "echo '{}'" \;
help path
glob **/*.tar.gz | each {|file| cd ($file | path dirname); tar -xzvf $file} 
ls
glob **/*.tar.gz | each {|file| cd ($file | path dirname); print -xzvf $file} 
glob **/*.tar.gz | each {|file| cd ($file | path dirname); print $file} 
glob **/*.tar.gz | each {|file| echo ($file | path dirname); print $file} 
glob **/*.tar.gz | each {|file|  ($file | path dirname); print $file} 
glob **/*.tar.gz | each {|file| cd ($file | path dirname) } 
glob **/*.tar.gz | each {|file| print ($file | path dirname) } 
glob **/*.tar.gz | each {|file| echo ($file | path dirname) } 
glob **/*.tar.gz | each {|file| print ($file) } 
vim krabs.nu 
mkdir test
ls
cp rust-analyzer-nightly-x86_64-unknown-linux-gnu.tar.gz test/
cp rust-analysis-nightly-x86_64-unknown-linux-gnu.tar.gz test/
cd test/
cp ../krabs.nu .
vim krabs.nu 
nu krabs.nu 
vim krabs.nu 
nu krabs.nu 
cd git/rust/build/dist/
cd test/
ls
vim krabs.nu 
nu krabs.nu 
vim krabs.nu 
nu krabs.nu 
vim krabs.nu 
nu krabs.nu 
vim krabs.nu 
nu krabs.nu 
vim krabs.nu 
nu krabs.nu 
help into
vim krabs.nu 
nu krabs.nu 
vim krabs.nu 
vim ../krabs.nu 
cd ..
rm -rf test/
open krabs.txt | lines
mkdir test
cp rust-analysis-nightly-x86_64-unknown-linux-gnu.tar.gz test/
cp rust-analyzer-nightly-x86_64-unknown-linux-gnu.tar.gz test/
cd test/
open ../krabs.txt | lines | tar xvvf
open ../krabs.txt | lines | tar xvvf '{}'
open ../krabs.txt | lines | print
open ../krabs.txt 
cd ..
ls
rm -rf test/
ls
ls rustc-nightly-src/
ls
ls 
ls | where type == dir
cd clippy-nightly-x86_64-unknown-linux-gnu/
ls
sudo ./install.sh
ls /usr/local/bin
ls | where type == dir
cd ..
ls | where type == dir
sudo ./llvm-bitcode-linker-nightly-x86_64-unknown-linux-gnu/install.sh
sudo ./llvm-tools-nightly-x86_64-unknown-linux-gnu/install.sh 
sudo ./miri-nightly-x86_64-unknown-linux-gnu/install.sh 
sudo ./rust-analysis-nightly-x86_64-unknown-linux-gnu/install.sh 
sudo ./rust-analyzer-nightly-x86_64-unknown-linux-gnu/install.sh 
ls | where type == dir
sudo ./rust-docs-json-nightly-x86_64-unknown-linux-gnu/install.sh 
sudo ./rust-docs-nightly-x86_64-unknown-linux-gnu/install.sh 
sudo ./rust-dev-nightly-x86_64-unknown-linux-gnu/install.sh 
sudo ./rust-nightly-x86_64-unknown-linux-gnu/install.sh
ls /usr/local/bin
/usr/local/bin/rustc --version
$env.CARGO
echo $CARGO
$env.CARGO = "/usr/local/bin/rustc"
$env.CARGO = /usr/local/bin/cargo
$env.CARGO = "/usr/local/bin/cargo"
$env.RUSTC = "/usr/local/bin/rustc"
$env.RUSTDOC = "/usr/local/bin/rustdoc"
cd rust
vim hello.rs 
$env.RUSTFMT = "/usr/local/bin/rustfmt"
config --set [edit_mode vi]
config -h
config env
$env.config.edit_mode = "vi"
vim $nu.config-path
xrs rust
ls -l ~/.cargo/bin/
vim hello.rs 
vim ~/.local/state/nvim/lsp.log 
cd git/rust/build/dist/
ls
cd ..
ls
cd rust-src-nightly/
ls
sudo ./install.sh
ls /usr/local/bin
cd rust
ls
vim hello.rs 
rm ~/.local/state/nvim/lsp.log 
vim hello.rs 
vim ~/.local/state/nvim/lsp.log 
vim hello.rs 
vim ~/.local/state/nvim/lsp.log 
vim hello.rs 
vim ~/.local/state/nvim/lsp.log 
vim ~/.config/nvim/lua/plugins/mini.lua 
vim $nu.config-path
$env
vim $nu.config-path
dbus-run-session sway
exit
$env
cd rust
vim hello.rs 
sudo poweroff 
date now
sudo pkill chronyd
sudo chronyd
date now
xrs libelf
xrs libbpf
xi libbpf-devel
xrs bpftool
xi bpftool
cd git
ls
git clone https://github.com/sched-ext/scx.git
cd scx/
ls
cd ..
cd scx/
/usr/local/bin/rustc --version
meson setup build --prefix ~
xrs jq
xi jq-devel
meson setup build --prefix ~
xrs protoc
xi protobuf-devel
meson setup build --prefix ~
xi protobuf
xrs protobuf
xi protobuf-c
meson setup build --prefix ~
xi protobuf
meson setup build --prefix ~
xrs llvm-strip
xrs llvm
xi llvm
meson setup build --prefix ~
xrs libseccomp
xi libseccomp-devel
meson setup build --prefix ~
meson setup build --prefix ~ -Dopenrc=disabled -Dsystemd=disabled
meson setup --wipe
meson setup --wipe ~
meson setup --wipe build
xrs libalpm
xrs alpm
zcat /proc/config.gz | grep NUMA
ls
cd ..
rm -rf scx/
git clone https://github.com/sched-ext/scx.git
cd scx
meson setup build
meson compile -C build
cd ..
rm -rf scx/
git clone https://github.com/sched-ext/scx.git
stat /usr/bin/cc
git clone https://github.com/sched-ext/scx.git
$env.CC = "/usr/local/bin/gcc"
cd scx/
meson setup build --prefix ~ -Dopenrc=disabled -Dsystemd=disabled
meson compile -C build
ls build/scheds/c/
cd build/scheds/c/
ls
./scx_simple
cat /sys/kernel/sched_ext/state
sudo ./scx_simple
cd -
ls
cargo add scx_rustland
cargo add --package scx_rustland
cargo add 
cargo add "scx_rustland"
cd scheds/rust/
ls
cd scx_rustland/
ls
cargo add "scx_rustland"
$env.CC
vim $nu.config-path
cd scx_rustland/
cd scx
ls
vim Cargo.toml 
cargo build --release-fast
cargo build --release
vim Cargo.toml 
ls
git status
cd rust
ls
cd ..
cd target
ls
cd release/
ls
./scx_lavd
sudo ./scx_lavd
zcat /proc/config.gz | grep NOCB
sudo ./scx_rustland 
ls
sudo ./scx_bpfland 
./scx_bpfland --help
./scx_flash --help
vim ~/scx_loader.toml
./scx_loader --help
./scx_loader -a
cd scx/target/release
ls
sudo ./scx_bpfland 
cd Downloads/
ls
sudo ./scx_loader -a
./PrismLauncher-Linux-x86_64.AppImage
firefox 
./PrismLauncher-Linux-x86_64.AppImage
sudo ./scx_bpfland -m performance
nvim
vim ~/.config/nvim/lua/plugins/treesitter.lua 
nvim
cd scx/target/release
cd
nvim
sudo ./scx_bpfland -m performance
nvim
nvim 
nvim
sudo ./scx_flash 
cd scx/target/release
cd 
nvim
sudo ./scx_loader -a
./scx_loader -h
./scx_loader --version
cd scheds
cd scx/scheds
cd scx/sched
cd scx
ls
cd scheds/
ls
cd c
ls
cd ..
ls
cd include/
ls
cd scx/
ls
cd ..
ls
cd rust/
ls
cd ..
cd c/
ls
cd ..
ls
cd ..
ls
cd build/scheds/c/
ls
nvim
sudo ./scx_simple 
nvim
sudo ./scx_userland 
nvim
sudo ./scx_central 
ls
nvim
sudo ./scx_flatcg 
ls
nvim
sudo ./scx_nest
ls
cd -
ls
cd target/release/build/
ls
cd -
ls
cd scx/target/release
ls
nvim
sudo ./scx_rustland
sudo ./scx_tickless 
sudo ./scx_lavd
sudo ./scx_loader 
cd scx/target/release
sudo ./scx_lavd
sudo ./scx_loader -a
nvim
sudo ./scx_rlfifo 
cd build/scheds/c/
cd -
cd scx
ls
cd build/scheds/c/
ls
nvim
ls
cd Down
ls
./PrismLauncher-Linux-x86_64.AppImage
sensors
sensors
sp
ps
cd scx/target/release
cd Downloads/
ls
cd 'Image-Line - FL Studio Producer Edition v21.2.3 Build [4004] {RePack by KpoJIuK}/'
ls
wine "FL Studio v21.2.3 [4004].exe" 
winecfg
cd ..
ls
cd ..
rm -rf .wine
winecfg
$env.DISPLAY
wine regedit
ls
cd git
ls
sudo ./scx_bpfland -m performance
sudo poweroff 
date now
sudo pkill chronyd ; sudo chronyd
date now
sudo pkill chronyd ; sleep 1 ; sudo chronyd
sudo pkill chronyd ; sleep 1s ; sudo chronyd
help sleep
sudo pkill chronyd ; sleep 1sec ; sudo chronyd
date now
sudo pkill chronyd ; sleep 2sec ; sudo chronyd
date now
sudo pkill chronyd ; sleep 2sec ; sudo chronyd
date now
sudo pkill chronyd
sudo chronyd
date now
ls
cd git
ls
git clone https://github.com/Frogging-Family/wine-tkg-git.git
ls
cd wine-tkg-git/
ls
cd wine-tkg-git/
ls
cat .config/modprobed.db | grep ntsync
cat .config/modprobed.db | grep "ntsync"
cat .config/modprobed.db 
exit
vim customization.cfg 
./non-makepkg-build.sh
vim customization.cfg 
ls
vim wine-tkg-profiles/wine-tkg-default-tkg.cfg 
WINEARCH="wow64" winecfg
cd Downloads
ls
cd 'Image-Line - FL Studio Producer Edition v21.2.3 Build [4004] {RePack by KpoJIuK}/'
ls
WINEPREFIX=~/.wine WINEARCH=wow64 winetricks -q -f corefonts dotnet48
WINEPREFIX=/home/krabs/.wine WINEARCH=wow64 winetricks -q -f corefonts dotnet48
WINEPREFIX=/home/krabs/.wine WINEARCH=wow64 winetricks -q -f corefonts
cd wine-tkg
vim customization.cfg 
rg wow64
./non-makepkg-build.sh --help
WINEPREFIX=/home/krabs/.wine WINEARCH=wow64 winetricks -q -f gdiplus
WINEPREFIX=/home/krabs/.wine WINEARCH=wow64 wine "FL Studio v21.2.3 [4004].exe" 
WINEPREFIX=/home/krabs/.wine WINEARCH=wow64 winecfg
cd Downloa
ls
WINEPREFIX=/home/krabs/.wine WINEARCH=wow64 wine ndp48-x86-x64-allos-enu.exe 
rm -rf ~/.wine
ls ~/.wine
WINEPREFIX=/home/krabs/.wine WINEARCH=wow64 wine ndp48-x86-x64-allos-enu.exe 
7z x dxvk-2.6.2.tar.gz -o*
rm -rf dxvk-2.6.2.tar/
mkdir dxvk ; tar xvvf dxvk-2.6.2.tar.gz -C dxvk
cd dxvk/
ls
cd dxvk-2.6.2/
ls
cp x32/*.dll ~/.wine/drive_c/windows/syswow64/
cp x64/*.dll ~/.wine/drive_c/windows/system32/
cd Down
cd Image
ls
WINEPREFIX=/home/krabs/.wine WINEARCH=wow64 wine "FL Studio v21.2.3 [4004].exe" 
cd ..
sudo xbps-remove -R wine
vim wine-tkg-profiles/
vim wine-tkg-profiles/advanced-customization.cfg 
cd void-packages
vim srcpkgs/wine/template
gettext-devel ncurses-devel glu-devel libSM-devel
vim ~/text.txt
xrs vulkan
xrs libdbus
./non-makepkg-build.sh
xrs mingw
vim ~/.config/waybar/config 
fc-list | grep -i emoji
vim ~/.config/waybar/style.css 
fc-list | grep -i emoji
cd DOwn
7z x x86_64-15.1.0-release-win32-seh-ucrt-rt_v12-rev0.7z -o*
cd x86_64-15.1.0-release-win32-seh-ucrt-rt_v12-rev0/
vim srcpkgs/wine/template
ls
glob *
cd x86
ls
cd mingw64/
ls
fastfetch
sensors
ps aux
ps
help sort
ps | sort
ps | sort-by mem
fastfetch
cd scx/target/release
cd Downloads/
ls
cd x86_64-15.1.0-release-win32-seh-ucrt-rt_v12-rev0/
l
ls
cd mingw64/
ls
cat build-info.txt 
clear
ls
ls etc/
ls include/
ls opt/
ls opt/share/
ls opt/bin/
glob **/*
glob **/* | lines
ls
cd etc/
ls
cd ..
cd bin/
ls
./x86_64-w64-mingw32-c++.exe
./x86_64-w64-mingw32-gcc.exe
cd ..
ls
ls x86_64-w64-mingw32/
ls x86_64-w64-mingw32/bin/
ls x86_64-w64-mingw32/lib/
ls x86_64-w64-mingw32/include/
xrs mingw
xi cross-x86_64-w64-mingw32ucrt
xbps-query -f cross-x86_64-w64-mingw32ucrt
cd ..
ls
cd ..
ls
rm -r x86_64-15.1.0-release-win32-seh-ucrt-rt_v12-rev0/
ls
xrs flex
xi flex bison
xrs gperf
xi gperftools-devel
xi gperf
xrs gmp
xrs mpfr
xrs perl
xi perl
cd wine-tkg
ls
./non-makepkg-build.sh
vim wine-tkg-profiles/advanced-customization.cfg 
cat ~/text.txt 
xi $"(cat /home/krabs/text.txt)"
sudo xbps-install $"(cat /home/krabs/text.txt)"
sudo xbps-install -S $(cat /home/krabs/text.txt)
sudo xbps-install -S $"(cat /home/krabs/text.txt)"
sudo xbps-install -S "$"(cat /home/krabs/text.txt)""
vim ~/text.txt 
sudo xbps-install -S "$"(cat /home/krabs/text.txt)""
sudo xbps-install -S $"(cat /home/krabs/text.txt)"
xi gettext-devel
xi gettext-devel ncurses-devel
cat ~/text.txt 
xi gettext-devel ncurses-devel glu-devel libSM-devel libXext-devel libX11-devel libXpm-devel libXinerama-devel libXcomposite-devel libXmu-devel libXxf86vm-devel libXcursor-devel libXrandr-devel libXdamage-devel libXi-devel alsa-lib-devel libgphoto2-devel glib-devel freetype-devel pulseaudio-devel giflib-devel v4l-utils-devel fontconfig-devel gnutls-devel dbus-devel sane-devel libpcap-devel cups-devel ocl-icd-devel vulkan-loader-devel gst-plugins-base1-devel SDL2-devel
xi wine-common
xrs mingw
xi cross-x86_64-w64-mingw32
xi cross-i686-w64-mingw32
xi void-repo-multilib
xi void-repo-multilib-nonfree
xi void-repo-nonfree
xi parsec
./non-makepkg-build.sh
vim wine-tkg-profiles/advanced-customization.cfg 
vim $nu.config-path
$env.CC
help set
help env
help $env
hide-env CC
$env.CC
cd wine-tkg
vim $nu.config-path
cd void-packages
./non-makepkg-build.sh
vim srcpkgs/wine/template
vim wine-tkg-profiles/advanced-customization.cfg 
vim customization.cfg 
./non-makepkg-build.sh
vim customization.cfg 
vim prepare.log 
vim customization.cfg 
./non-makepkg-build.sh
cd
ls
ls wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine --version
ls wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine -v
wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine --version
cd wine-tk
ls
vim customization.cfg 
echo '#include <linux/ntsync.h>' | gcc -H -E -fsyntax-only - 2>&1 | head -n1 | cut -d' ' -f2-
ls /usr/include/linux/ntsync.h
vim /usr/include/linux/ntsync.h
ls /proc/modules
cat /proc/modules
tldr modprobe
zcat /proc/config.gz | grep NTSYNC
ls
cd
cd wine-tkg-staging-git-10.10.r5.g5054f735/
ls
cd bin
WINEPREFIX=/home/krabs/.winefl winecfg
ls
WINEPREFIX=/home/krabs/.winefl ./winecfg
WINEPREFIX=/home/krabs/.winefl ./wine ~/Downloads/ndp48-x86-x64-allos-enu.exe
cd Down
ls
cd 'Image-Line - FL Studio Producer Edition v21.2.3 Build [4004] {RePack by KpoJIuK}/'
ls
adb devices
ls
adb devices
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine 'FL Studio v21.2.3 [4004].exe'
cd 
cd `.wine/drive_c/Program Files (x86)/`
l
sls
ls
cd `Common Files/`
ls
cd ..
ls
cd `Program Files/`
ls
cd ..
ls
cd users/krabs/
ls
cd Desktop
ls
cd
cd `.winefl/drive_c/Program Files (x86)/`
ls
cd ..
ls
cd `Program Files/`
ls
cd Image-Line/
ls
cd `FL Studio 21/`
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine FL64.exe
cd
vim .local/bin/
$env.HOME
vim .local/bin/
ls `.winefl/drive_c/Program Files/Image-Line`
ls `.winefl/drive_c/Program Files/Image-Line/FL Studio 21`
vim .local/bin/
chmod +x .local/bin/flstudio 
flstudio 
adb shell
cd
cd Downloads/
l
ls
7z x '[北海道コミティア0.5] KITC Project - Drum ’n’ Bass Compilation AO1.5 (KITC-0003) [FLAC].zip' -o*
cd '[北海道コミティア0.5] KITC Project - Drum ’n’ Bass Compilation AO1.5 (KITC-0003) [FLAC]/'
ls
cd '[北海道コミティア0.5] KITC Project - Drum ’n’ Bass Compilation AO1.5 (KITC-0003) [FLAC]/'
l
ls
mpv "01 16bitの独占欲／イントロP.flac" 
cd ..
ls
cd ..
rm '[北海道コミティア0.5] KITC Project - Drum ’n’ Bass Compilation AO1.5 (KITC-0003) [FLAC]/'
rm -r '[北海道コミティア0.5] KITC Project - Drum ’n’ Bass Compilation AO1.5 (KITC-0003) [FLAC]/'
ls
rm '[北海道コミティア0.5] KITC Project - Drum ’n’ Bass Compilation AO1.5 (KITC-0003) [FLAC].zip'
7z x `EmoCosine Essentials Vol.01 (DL).zip` -o*
cd `EmoCosine Essentials Vol.01 (DL)/`
ls
cd `EmoCosine Samples/`
ls
cd .
cd ..
ls
cd ..
ls
help
help ls
glob **/*.zip
glob *.zip
glob *.rar
7z x `Zekk Drum Toolkit.rar` -o*
xrs rar
xi p7zip-unrar
7z x `Zekk Drum Toolkit.rar` -o*
rm -rf `Zekk Drum Toolkit/`
7z x `Zekk Drum Toolkit.rar` -o*
ls
xbps-alternatives -s 7zip-unrar
sudo xbps-alternatives -s 7zip-unrar
rm -rf `Zekk Drum Toolkit/`
7z x `Zekk Drum Toolkit.rar` -o*
cd `Zekk Drum Toolkit/`
ls
cd `Zekk Drum Toolkit/`
ls
cd DOw
ls
7z x `JimVirslox - Private Kawaii EDM Pack Vol.1.zip` -o*
cd `JimVirslox - Private Kawaii EDM Pack Vol.1/`
ls
cd `JimVirslox - Private Kawaii EDM Pack Vol.1/`
ls
cd Claps/
ls
cd Download
ls
ls | where type == dir
cd `IK Multimedia - MODO BASS 2 v2.0.3/`
ls
7z x `Setup MODO BASS 2 v2.0.3.7z`
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Setup MODO BASS 2 v2.0.3.exe`
WINEPREFIX=/home/krabs/.winefl WINEARCH=wow64 winetricks -q -f vcrun6sp6
WINEPREFIX=/home/krabs/.winefl WINEARCH=wow64 winetricks -q -f vcrun6sp6 
cd ..
ls
ls | where type == dir
ls
ls | where type == dir
cd 'Roland Cloud -  Synth Bundle [08.2023]/'
ls
7z x `Setup SRX ELECTRIC PIANO v1.0.3.7z`
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Setup SRX ELECTRIC PIANO v1.0.3.exe`
cd ..
ls
ls | where type == dir
cd `Xfer Records - Serum FX v1.36b8/`
ls
cat KEY.txt 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Install_Xfer_SerumFX_Update_136b8.exe
flstudio 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Install_Xfer_SerumFX_Update_136b8.exe
mkdir `~/.winefl/drive_c/Program Files/Image-Line/FL Studio 21/Plugins/VST`
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Install_Xfer_SerumFX_Update_136b8.exe
ls `.winefl/drive_c/Program Files/Image-Line/FL Studio 21/Plugins/VST/`
sudo pkill chronyd
sudo chronyd
vim ~/.config/waybar/style.css 
exit
WLR_DRM_NO_ATOMIC=1 WLR_RENDERER=vulkan dbus-run-session sway
exit
vim ~/.config/waybar/style.css 
WLR_DRM_NO_ATOMIC=1 WLR_RENDERER=vulkan dbus-run-session sway
exit
pipewire
cd Computer
ls
mpv --playlist=compenhanced.txt 
flstudio 
nvim
rm `.winefl/drive_c/Program Files/Image-Line/FL Studio 21/Plugins/*.dll`
ls `.winefl/drive_c/Program Files/Image-Line/FL Studio 21/Plugins/*.dll`
ls `.winefl/drive_c/Program Files/Image-Line/FL Studio 21/Plugins/`
ls `.winefl/drive_c/Program Files/Image-Line/FL Studio 21/Plugins/VST`
rm `.winefl/drive_c/Program Files/Image-Line/FL Studio 21/Plugins/VST/*.dll`
ls `.winefl/drive_c/Program Files/Image-Line/FL Studio 21/Plugins/VST`
vim ~/.config/waybar/style.css
fc-list | grep -i terminess
vim ~/.config/waybar/style.css
cd DOwn
ls
cd Xfer.Records.Serum.2.v2.0.19-V.R_TCD_X/
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Xfer.Records.Serum.2.v2.0.19-V.R_TCD_X.exe
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Install_Xfer_Serum2_2.0.19.exe
WINEPREFIX=/home/krabs/.winefl winetricks -q -f corefonts
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine winetricks
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine --help
$env.WINESERVER = "/home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver"
$env.WINESERVER
WINEPREFIX=/home/krabs/.winefl winetricks -q -f corefonts
$env.WINELOADER = "/home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine"
WINEPREFIX=/home/krabs/.winefl winetricks -q -f corefonts
$env.WINE = "/home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine"
WINEPREFIX=/home/krabs/.winefl winetricks -q -f corefonts
WINEPREFIX=/home/krabs/.winefl winetricks --self-update 
sudo WINEPREFIX=/home/krabs/.winefl winetricks --self-update 
WINEPREFIX=/home/krabs/.winefl winetricks -q -f corefonts
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k15
WINEPREFIX=/home/krabs/.winefl winetricks -q -f vcrun6sp6 
qbittorrent-nox 
cd .
cd ..
ls
ls | where type == dir
cd Mercuriall.AmpBox.v1.6.3/
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Mercuriall AmpBox v1.6.3.exe`
cd ..
ls | where type == dir
cd `IK Multimedia - MODO BASS 2 v2.0.3/`
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Setup MODO BASS 2 v2.0.3.exe`
cd ..
ls
ls | where type == dir
cd 'Roland Cloud -  Synth Bundle [08.2023]/'
ls
WINEPREFIX=/home/krabs/.winefl winetricks -q -f meiryo 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Setup SRX ELECTRIC PIANO v1.0.3.exe`
cd ..
ls
ls | where type == dir
cd Xfer.Records.Serum.2.v2.0.19-V.R_TCD_X/
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Xfer.Records.Serum.2.v2.0.19-V.R_TCD_X.exe
WINEPREFIX=/home/krabs/.winefl winetricks -q -f fonts 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Install_Xfer_Serum2_2.0.19.exe
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k15
WINEPREFIX=/home/krabs/.winefl winetricks -q -f cjkfonts 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Install_Xfer_Serum2_2.0.19.exe
flstudio
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k15
glob `~/.winefl/drive_c/Program Files/`
glob `~/.winefl/drive_c/Program Files/*`
glob `~/.winefl/drive_c/Program Files/IK Multimedia/*`
glob `~/.winefl/drive_c/users/krabs/AppData/Local/Xfer/*`
glob `~/.winefl/drive_c/users/krabs/AppData/Local/Xfer/**`
glob `~/.winefl/drive_c/users/krabs/AppData/Local/Xfer/Serum/*`
glob `~/.winefl/drive_c/users/krabs/AppData/Roaming/Xfer/Serum 2/*`
glob `~/.winefl/drive_c/users/krabs/AppData/Roaming/Xfer/**`
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Xfer.Records.Serum.2.v2.0.19-V.R_TCD_X.exe
cd ..
cd `Xfer Records Serum 2 v2.0.19/Xfer.Records.Serum.2.v2.0.19-V.R_TCD_X/`
ls
vim Read_Me.txt 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Xfer.Records.Serum.2.v2.0.19-V.R_TCD_X.exe
cd ..
rm -r `Xfer Records Serum 2 v2.0.19/`
sudo vim /etc/hosts 
man /etc/hosts_
man hosts 
sudo vim /etc/hosts 
cd 
cd .winefl/drive_c/users/krabs/AppData/Local/Xfer/
ls
$env.WINE
$env.WINESERVER
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Uninstall_Serum2.exe
qbittorrent-nox 
ls
ls Serum/
cd ..
ls
cd
cd Downloads/
cd 'Xfer - Serum 2 v2.0.16 [Audiowarez]/'
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Xfer Serum2 Installer.exe`
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Install_Xfer_Serum2_2.0.16.exe
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Xfer Serum2 Installer.exe`
flstudio 
cd scx/target/release
l
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k15
flstudio 
cd dxvk
ls
cp x64/*.dll ~/.winefl/drive_c/windows/system32/
cp x32/*.dll ~/.winefl/drive_c/windows/syswow64/
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/winecfg
sudo wg
c
cd
flstudio 
DISPLAY= flstudio 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k15
flstudio 
$env.DISPLAY
flstudio 
cd Program
ls
cd ..
cd `Program Files/`
ls
cd ..
cd
cd .winefl/drive_c/users/krabs/AppData/Local/Xfer
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine Uninstall_Serum2.exe
cd DOwn
ls
ls | where type == dir
cd `Xfer Records - Serum v1.36b8/`
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Xfer Serum v136b8 -WIN.exe`
cd >.
cd ..
ls
ls | where type == dir
cd 'SonicCat - Purity v1.4.3 VSTi x86 x64 [2022] [rutracker-6393354].torrent'
cd SonicCat_Purity_1.4.3_Crack_with_Keygen_WINDOWS/
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine SonicCat_Purity_v1.4.3_WIN.exe
vim "Patch/README + INSTRUCTIONS.txt" 
cd Patch/
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine PATCH.BAT
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Purity Keygen.exe`
WINEPREFIX=/home/krabs/.winefl winetricks -q -f dotnet472 
$env.WINESERVER
$env.WINESERVER = "/home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver"
$env.WINE = "/home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine"
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k15
qbittorrent-nox 
WINEPREFIX=/home/krabs/.winefl winetricks -q -f dotnet472 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k15
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Purity Keygen.exe`
cd ..
cd .
cd ..
vim `Xfer Records - Serum v1.36b8/KEY.txt`
flstudio 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k15
sudo vim /etc/hosts 
flstudio 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k15
DISPLAY= flstudio 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k15
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k9
vim .local/bin/flstudio 
ls `.winefl/drive_c/Program Files/Image-Line/FL Studio 21/`
vim .local/bin/flstudio 
flstudio 
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k9
cd Dow
ls
ls | where type == dir
cd SonicCat_Purity_1.4.3_Crack_with_Keygen_WINDOWS/Patch/
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Purity Keygen.exe`
cd Down
7z PRKC_FX_Pack.zip -o*
7z x PRKC_FX_Pack.zip -o*
7z x VOLTA_SAMPLE_PACK_VOL.01.zip -o*
7z x GTuneWin64.zip
7z -l GTuneWin64.zip
tldr 7z
7z l GTuneWin64.zip
rm GVSTLicense.txt
cp GTune.dll `~/.winefl/drive_c/Program Files/Image-Line/FL Studio 21/Plugins/VST/.`
cd Down
ls | where type == dir
cd 'Roland Cloud -  Synth Bundle [08.2023]/'
ls
rm *.exe
ls
7z x `Setup SRX PIANO 1 v1.0.1.7z`
ls
7z x `Setup SRX STUDIO v1.0.3.7z`
7z x Setup SRX STUDIO v1.0.3.7z
7z x "Setup SRX STUDIO v1.0.3.7z"
;s
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Setup SRX PIANO 1 v1.0.1.exe`
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Setup SRX STUDIO v1.0.3.exe`
sl
ls
rm *.exe
7z x `Setup SRX STRINGS v1.0.2.7z`
ls
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wine `Setup SRX STRINGS v1.0.2.exe`
cd ..
ls
7z 1000_kawaii_voice___vol.1.zip -o*
7z x 1000_kawaii_voice___vol.1.zip -o*
7z x `lf238mp3 (1).zip` -o*
7z x onta_sample_vol1.zip -o*
flstudio 
cd Downloads/
cd `lf238mp3 (1)/`
ls
cd '[LF238MP3] 村上苺 - Murakami Voice Essentials/'
ls
cd ..
cp -r '[LF238MP3] 村上苺 - Murakami Voice Essentials/' ..
cd '[LF238MP3] 村上苺 - Murakami Voice Essentials/'
ls
ls `Counting Numbers/`
mpv "Counting Numbers/Five.wav" 
ls `DAW Crashed/`
ls
mpv "Fuwaa Phrases/ふわぁー 04.wav" 
ls
mpv "Voice Percussions/Don Don Tuku Tan Tan 02..wav" 
flstudio 
cd ..
ls
cd krabs/
ls
rm -r .winefl/
cd Downloads/
ls
rm -r 1000_kawaii_voice___vol.1*
ls
rm -r CodeNewRoman*
rm -r Cousine*
ls
rm -r DroidSansMono*
ls
rm -r `EmoCosine Essentials Vol.01 (DL)*`
ls
ls | where type == dir
rm -r Iosevka
ls | where type == dir
rm -r `JimVirslox - Private Kawaii EDM Pack Vol.1*`
rm -r PRKC_FX_Pack*
rm -r 'Roland Cloud -  Synth Bundle [08.2023]*'
ls | where type == dir
rm -r 'Roland Cloud -  Synth Bundle [08.2023]/'
rm 'Roland Cloud - Synth Bundle v2023.08 VSTi, VST3i, AAX x64 [14.08.2023] [rutracker-6397266].torrent'
rm -r VOLTA_SAMPLE_PACK_VOL.01*
rm -r `Zekk Drum Toolkit*`
rm -r '[LF238MP3] 村上苺 - Murakami Voice Essentials/'
rm -r `lf238mp3 (1)*`
rm -r onta_sample_vol1*
ls
ls | where type == dir
rm -r `IK Multimedia - MODO BASS 2 v2.0.3/`
ls | where type == file
rm GTune*
rm *.ovpn
rm *.zip
ls | where type == file
rm *.torrent
ls | where type == file
rm OpenJDK17U-jre_x64_linux_hotspot_17.0.15_6.tar.gz
rm v2rayN-linux-64.AppImage
qbittorrent-nox 
ls
vim text.txt 
rm text.txt
cd ..
ls
cd krabs/
ls
cd Downloads/
ls
./uad-ng-linux
adb shell
mpv Origin.mp3 
sudo xbps-install -Su
xi Waybar
xmirror 
sudo xmirror
xi Waybar
sudo xbps-install -Su
ps -l | grep firefox
ps -l 
ps -l | where type == command
ps -l | sort-by command 
ps -l | select command
ps -l | get command
WINEPREFIX=/home/krabs/.winefl /home/krabs/wine-tkg-staging-git-10.10.r5.g5054f735/bin/wineserver -k9
ps -l | get command
ps -l | get command | lines
help slice
ps -l | get command | find firefox
ps -l | get command | grep firefox
ps -l | get command | find firefox
ps -l | find firefox
clear
sys cpu 
sys mem
sys disks 
sys net 
nmcli connect show
nmcli connect down wgxd
sudo nmcli connect down wgxd
cd git
ls
rm -rf universal-android-debloater-next-generation/
git clone https://github.com/Universal-Debloater-Alliance/universal-android-debloater-next-generation.git
ls
sys net | get ip
qbittorrent-nox 
$env.config.table.header_on_separator = true
sys net | get ip
ls
ps -l | find firefox
ps -l | get command | find firefox
ps -l | get command | grep firefox
vim $nu.config-path
vim $nu.env-path
vim .cache/carapace/init.nu 
vim .cache/carapace/bridges-zsh.json
vim $nu.config-path
sudo ./scx_bpfland -m performance
sudo reboot
xrs void-docs
vim .cache/carapace/init.nu 
rm .cache/carapace/init.nu 
sudo reboot 
vim .cache/carapace/init.nu 
sudo poweroff
date now
sudo pkill chronyd
sudo chronyd
date now
sudo reboot
sudo pkill chronyd
sudo chronyd
date now
cd git
ls
cd ..
nvim
vim ~/.config/waybar/style.css
cd Down
ls
cd scx/target/release
sudo ./scx_bpfland -m performance
cd scx
ls
cd build/scheds/c/
ls
./PrismLauncher-Linux-x86_64.AppImage
sudo ./scx_userland 
cd Downloads/
ls | where type == dir
cd `Accessing APIs Using HttpClient in .NET/`
ls
ls `01. Course Overview/`
glob **/*.mp4 | sort -n | save bruh.txt
help default
cd git
ls
git clone https://github.com/fdncred/nu_plugin_regex.git
cd nu_plugin_regex/
l
cargo build --release
vim $nu.config-path
ls
ls target/release/
ls ~/.cargo/bin
vim $nu.config-path
plugin use regex
regex
sudo xbps-install -Su
tldr cargo install
cd git
git clone https://github.com/nushell/nushell.git
cd nushell/
ls
cd scx/target/release
mpv --playlist=bruh.txt 
wpctl set-volume -l 1.5 @DEFAULT_AUDIO_SINK@ 5%+
ls target/release/
xbps-query -f nu
xbps-query -f nushell
sudo chsh -s /home/krabs/git/nushell/target/release/nu krabs
ls
sudo ./scx_bpfland -m performance
sudo reboot
xbps-query carapacee
xbps-query carapace
exit
sudo xbps-remove -R carapce
sudo xbps-remove -R carapace
cd Downloads/
ls
mkdir carapace ; tar xvvf carapace-bin_1.3.3_linux_amd64.tar.gz
cd carapace
ls
cd carapace
^cd carapace
z carapa
cd 
cd Downloads/carapace
cd Downloads/
vim $nu.config-path
regex
regex --help
ls
cp carapace ~/.local/bin/
carapace --help
vim ~/.config/sway/config 
cd .Net
kls
ls
mpv --playlist=bruh.txt 
ls
cd ..
http-server 
cd ..
http-server 
sudo nmcli connect down wgxd
vim ~/.config/alacritty/alacritty.toml
nvim
gh
xrs gh
xrs github
xi github-cli
gh login
gh auth
gh auth login
cd 
l
ls
mkdir dotfiels
rm -r dotfiels/
mkdir dotfiles
ls .config/
cp -r .config/sway ~/dotfiles/
cp -r .config/waybar ~/dotfiles
